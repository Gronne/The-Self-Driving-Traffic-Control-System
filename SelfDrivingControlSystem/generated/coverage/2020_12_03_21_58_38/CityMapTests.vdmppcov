class CityMapTests is subclass of TestCase, CityMap
	
	operations
		public CityMapTests : seq of char ==> CityMapTests
			CityMapTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
				TestCityMapINVsameKeysInMapsEmpty();
				TestCityMapINVsameKeysInMaps();
				TestCityMapINVsameKeysInMapsFailIDMap();
				
				TestCityMapINVAllInterMapRngIdsInIdRoadMapEmpty();
				TestCityMapINVAllInterMapRngIdsInIdRoadMap();
				TestCityMapINVAllInterMapRngIdsInIdRoadMapExtraIds();
				TestCityMapINVAllInterMapRngIdsInIdRoadMapFailMissingID();
				
				TestCityMapINVAllRoadMapRngIdsInIdInterMapEmpty();
				TestCityMapINVAllRoadMapRngIdsInIdInterMap();
				TestCityMapINVAllRoadMapRngIdsInIdInterMapExtraIds();
				TestCityMapINVAllRoadMapRngIdsInIdInterMapFailMissingID();
				
				TestCityMapINVAllIdKeysMatchObjectIDEmpty();
				TestCityMapINVAllIdKeysMatchObjectID();
				TestCityMapINVAllIdKeysMatchObjectIDFailInter();
				TestCityMapINVAllIdKeysMatchObjectIDFailRoad();
				
				TestCityMapINVMaxNInMappingsEmptyMap();
				TestCityMapINVMaxNInMappingsEmptySeqs();
				TestCityMapINVMaxNInMappings();
				TestCityMapINVMaxNInMappingsFailMore();
				
				TestCityMapINVidInMap();
				TestCityMapINVidInMapFail();
				
				TestCityMapINVmaxNIdenticalInSeqEmpty();
				TestCityMapINVmaxNIdenticalInSeq();
				TestCityMapINVmaxNIdenticalInSeqFail();
				
				TestCityMapINVcountElementInSeqEmptySeq();
				TestCityMapINVcountElementInSeqNotInSeq();
				TestCityMapINVcountElementInSeqOneInSeq();
				TestCityMapINVcountElementInSeqMultipleInSeq();
				
				TestCityMapINVaddToIdMapEmpty();
				TestCityMapINVaddToIdMapIntersection();
				
				TestCityMapINVaddNewInterToInterMapEmpty();
				TestCityMapINVaddNewInterToInterMapNew();
				TestCityMapINVaddNewInterToInterMapAlreadyThere();
				
				TestCityMapINVaddNewRoadToInterMapEmpty();
				TestCityMapINVaddNewRoadToInterMap();
				TestCityMapINVaddNewRoadToInterMapTwoTimes();
				
				TestCityMapINVaddToRoadMapEmpty();
				TestCityMapINVaddToRoadMap();
				TestCityMapINVaddToRoadMapOverride();
				
				TestCityMapConstructorEmpty();
				TestCityMapConstructorCopyEmptyCity();
				TestCityMapConstructorCopy();
				
				TestCityMapAddIntersection();
				TestCityMapAddIntersectionMultiple();
				
				TestCityMapAddRoad();
				TestCityMapAddRoadToSameInter();
				TestCityMapAddRoadMultiple();
				
				TestCityMapGetSetOfInterEmpty();
				TestCityMapGetSetOfInter();
				
				TestCityMapGetSetOfRoadEmpty();
				TestCityMapGetSetOfRoad();
				
				TestCityMapGetSeqOfRoadEmpty();
				TestCityMapGetSeqOfRoad();
				
				TestCityMapGetInterTupleFromRoadSingle();
				TestCityMapGetInterTupleFromRoadMultiple();
				TestCityMapGetInterTupleFromRoadChange();
				
				TestCityMapBlockRoad();
				TestCityMapBlockRoadDouble();
				
				TestCityMapGetRoadById();
				TestCityMapGetRoadByIdChange();
			);
			
			
		------------------ INVsameKeyInMaps -------------------
		
		protected TestCityMapINVsameKeysInMapsEmpty : () ==> ()
			TestCityMapINVsameKeysInMapsEmpty() == (
				dcl intersectionMap : map Identification`ID_t to seq of Identification`ID_t := {|->};
				dcl roadMap : map Identification`ID_t to (Identification`ID_t * Identification`ID_t) := {|->}; 
				
				dcl intersectionSectionIdMap : map Identification`ID_t to Intersection := {|->};
				dcl roadIdMap : map Identification`ID_t to Road := {|->}; 
				
				assertTrue(InvSameKeysInMaps(intersectionMap, intersectionSectionIdMap));
				assertTrue(InvSameKeysInMaps(roadMap, roadIdMap));
			);	
			
			
		protected TestCityMapINVsameKeysInMaps : () ==> ()
			TestCityMapINVsameKeysInMaps() == (
				dcl intersectionMap : map Identification`ID_t to seq of Identification`ID_t := { 1 |-> [],
																																												 2 |-> [],
																																												 3 |-> [] };
				dcl roadMap : map Identification`ID_t to (Identification`ID_t * Identification`ID_t) := { 4 |-> mk_(1, 2),
																																																  5 |-> mk_(1, 3),
																																																  6 |-> mk_(2, 3) }; 
				
				dcl intersectionSectionIdMap : map Identification`ID_t to Intersection := { 1 |-> new Intersection(),
																																										2 |-> new Intersection(),
																																										3 |-> new Intersection() };
				dcl roadIdMap : map Identification`ID_t to Road := { 4 |-> new Road(),
																														 5 |-> new Road(),
																														 6 |-> new Road() }; 
				
				assertTrue(InvSameKeysInMaps(intersectionMap, intersectionSectionIdMap));
				assertTrue(InvSameKeysInMaps(roadMap, roadIdMap));
			);	
			
		
		protected TestCityMapINVsameKeysInMapsFailIDMap : () ==> ()
			TestCityMapINVsameKeysInMapsFailIDMap() == (
				dcl intersectionMap : map Identification`ID_t to seq of Identification`ID_t := { 1 |-> [],
																																												 2 |-> [],
																																												 3 |-> [] };
				
				dcl intersectionSectionIdMap : map Identification`ID_t to Intersection := { 1 |-> new Intersection(),
																																										2 |-> new Intersection() };
				
				assertFalse(InvSameKeysInMaps(intersectionMap, intersectionSectionIdMap));
			);	
			
			
			
		----------- InvAllInterMapRngIdsInIdRoadMap ------------	
		
		protected TestCityMapINVAllInterMapRngIdsInIdRoadMapEmpty : () ==> ()
			TestCityMapINVAllInterMapRngIdsInIdRoadMapEmpty() == (
				dcl intersectionMap : intersectionMap_t := {|->};
				dcl roadIdMap : idRoadMap_t := {|->}; 
				
				assertTrue(InvAllInterMapRngIdsInIdRoadMap(intersectionMap, roadIdMap));
			);
			
		
		protected TestCityMapINVAllInterMapRngIdsInIdRoadMap : () ==> ()
			TestCityMapINVAllInterMapRngIdsInIdRoadMap() == (
				dcl intersectionMap : intersectionMap_t := { 1 |-> [1, 2, 3], 2 |-> [3, 4, 5], 3 |-> [1, 3, 5] };
				dcl roadIdMap : idRoadMap_t := { 1 |-> new Road(), 2 |-> new Road(), 3 |-> new Road(), 4 |-> new Road(), 5 |-> new Road() }; 
				
				assertTrue(InvAllInterMapRngIdsInIdRoadMap(intersectionMap, roadIdMap));
			);
			
		
		protected TestCityMapINVAllInterMapRngIdsInIdRoadMapExtraIds : () ==> ()
			TestCityMapINVAllInterMapRngIdsInIdRoadMapExtraIds() == (
				dcl intersectionMap : intersectionMap_t := { 1 |-> [1, 2, 3], 2 |-> [3, 4], 3 |-> [1, 3] };
				dcl roadIdMap : idRoadMap_t := { 1 |-> new Road(), 2 |-> new Road(), 3 |-> new Road(), 4 |-> new Road(), 5 |-> new Road() }; 
				
				assertTrue(InvAllInterMapRngIdsInIdRoadMap(intersectionMap, roadIdMap));
			);
			
			
		protected TestCityMapINVAllInterMapRngIdsInIdRoadMapFailMissingID : () ==> ()
			TestCityMapINVAllInterMapRngIdsInIdRoadMapFailMissingID() == (
				dcl intersectionMap : intersectionMap_t := { 1 |-> [1, 2, 3], 2 |-> [3, 4, 5], 3 |-> [1, 3, 5, 6] };
				dcl roadIdMap : idRoadMap_t := { 1 |-> new Road(), 2 |-> new Road(), 3 |-> new Road(), 4 |-> new Road(), 5 |-> new Road() }; 
				
				assertFalse(InvAllInterMapRngIdsInIdRoadMap(intersectionMap, roadIdMap));
			);
		
		
		
		----------- InvAllRoadMapRngIdsInIdInterMap ------------	
		
		protected TestCityMapINVAllRoadMapRngIdsInIdInterMapEmpty : () ==> ()
			TestCityMapINVAllRoadMapRngIdsInIdInterMapEmpty() == (
				dcl roadMap : roadMap_t := {|->};
				dcl interIdMap : idInterMap_t := {|->}; 
				
				assertTrue(InvAllRoadMapRngIdsInIdInterMap(roadMap, interIdMap));
			);
			
		
		protected TestCityMapINVAllRoadMapRngIdsInIdInterMap : () ==> ()
			TestCityMapINVAllRoadMapRngIdsInIdInterMap() == (
				dcl roadMap : roadMap_t := { 1 |-> mk_(1, 2), 2 |-> mk_(2, 3), 3 |-> mk_(3, 1) };
				dcl interIdMap : idInterMap_t := {1 |-> new Intersection(), 2 |-> new Intersection(), 3 |-> new Intersection() }; 
				
				assertTrue(InvAllRoadMapRngIdsInIdInterMap(roadMap, interIdMap));
			);
			
		
		protected TestCityMapINVAllRoadMapRngIdsInIdInterMapExtraIds : () ==> ()
			TestCityMapINVAllRoadMapRngIdsInIdInterMapExtraIds() == (
				dcl roadMap : roadMap_t := { 1 |-> mk_(1, 2), 2 |-> mk_(2, 3), 3 |-> mk_(3, 1) };
				dcl interIdMap : idInterMap_t := {1 |-> new Intersection(), 2 |-> new Intersection(), 3 |-> new Intersection(), 4 |-> new Intersection() }; 
				
				assertTrue(InvAllRoadMapRngIdsInIdInterMap(roadMap, interIdMap));
			);
			
			
		protected TestCityMapINVAllRoadMapRngIdsInIdInterMapFailMissingID : () ==> ()
			TestCityMapINVAllRoadMapRngIdsInIdInterMapFailMissingID() == (
				dcl roadMap : roadMap_t := { 1 |-> mk_(1, 2), 2 |-> mk_(2, 3), 3 |-> mk_(3, 4) };
				dcl interIdMap : idInterMap_t := {1 |-> new Intersection(), 2 |-> new Intersection(), 3 |-> new Intersection() }; 
				
				assertFalse(InvAllRoadMapRngIdsInIdInterMap(roadMap, interIdMap));
			);

		
		
		-------------- InvAllIdKeysMatchObjectID ---------------
		
		protected TestCityMapINVAllIdKeysMatchObjectIDEmpty : () ==> ()
			TestCityMapINVAllIdKeysMatchObjectIDEmpty() == (
				dcl idInterMap : idInterMap_t := {|->};
				dcl idRoadMap : idRoadMap_t := {|->};
				
				assertTrue(InvAllIdKeysMatchObjectID(idInterMap));
				assertTrue(InvAllIdKeysMatchObjectID(idRoadMap));
			);
			
		
		protected TestCityMapINVAllIdKeysMatchObjectID : () ==> ()
			TestCityMapINVAllIdKeysMatchObjectID() == (
				dcl idInterMap : idInterMap_t := {1 |-> new Intersection(1), 123 |-> new Intersection(123), "yo" |-> new Intersection("yo")};
				dcl idRoadMap : idRoadMap_t := {1 |-> new Road(1, 10, 10), 123 |-> new Road(123, 10, 10), "yo" |-> new Road("yo", 10, 10)};
				
				assertTrue(InvAllIdKeysMatchObjectID(idInterMap));
				assertTrue(InvAllIdKeysMatchObjectID(idRoadMap));
			);
			
		
		protected TestCityMapINVAllIdKeysMatchObjectIDFailInter : () ==> ()
			TestCityMapINVAllIdKeysMatchObjectIDFailInter() == (
				dcl idInterMap : idInterMap_t := {1 |-> new Intersection(2), 123 |-> new Intersection(123), "yo" |-> new Intersection("yo")};
				
				assertFalse(InvAllIdKeysMatchObjectID(idInterMap));
			);
			
			
		protected TestCityMapINVAllIdKeysMatchObjectIDFailRoad : () ==> ()
			TestCityMapINVAllIdKeysMatchObjectIDFailRoad() == (
				dcl idRoadMap : idRoadMap_t := {1 |-> new Road(2, 10, 10), 123 |-> new Road(123, 10, 10), "yo" |-> new Road("yo", 10, 10)};
				
				assertFalse(InvAllIdKeysMatchObjectID(idRoadMap));
			);
		
		
		
		------------------ InvMaxNInMappings -------------------
		
		protected TestCityMapINVMaxNInMappingsEmptyMap : () ==> ()
			TestCityMapINVMaxNInMappingsEmptyMap() == (
				dcl intersectionMap : intersectionMap_t := { |-> };
				
				assertTrue(InvMaxNInMappings(intersectionMap, 2));
			);
			
			
		protected TestCityMapINVMaxNInMappingsEmptySeqs : () ==> ()
			TestCityMapINVMaxNInMappingsEmptySeqs() == (
				dcl intersectionMap : intersectionMap_t := { 1 |-> [], 2 |-> [], 3 |-> [] };
				
				assertTrue(InvMaxNInMappings(intersectionMap, 2));
			);
			
			
		protected TestCityMapINVMaxNInMappings : () ==> ()
			TestCityMapINVMaxNInMappings() == (
				dcl intersectionMap1 : intersectionMap_t := { 1 |-> [1, 2, 3], 2 |-> [3, 4, 5], 3 |-> [1, 3, 5] };
				dcl intersectionMap2 : intersectionMap_t := { 1 |-> [1, 2, 3, 2], 2 |-> [3, 4, 5], 3 |-> [1, 3, 5] };
				dcl intersectionMap3 : intersectionMap_t := { 1 |-> [1, 2, 3, 2], 2 |-> [3, 4, 5, 5, 5], 3 |-> [1, 3, 5, 2] };
				
				assertTrue(InvMaxNInMappings(intersectionMap1, 1));
				assertTrue(InvMaxNInMappings(intersectionMap2, 2));
				assertTrue(InvMaxNInMappings(intersectionMap3, 3));
				assertTrue(InvMaxNInMappings(intersectionMap3, 4));
			);
			
		
		protected TestCityMapINVMaxNInMappingsFailMore : () ==> ()
			TestCityMapINVMaxNInMappingsFailMore() == (
				dcl intersectionMap2 : intersectionMap_t := { 1 |-> [1, 2, 3, 2], 2 |-> [3, 4, 5], 3 |-> [1, 3, 5] };
				dcl intersectionMap3 : intersectionMap_t := { 1 |-> [1, 2, 3, 2], 2 |-> [3, 4, 5, 5, 5], 3 |-> [1, 3, 5, 2] };
				
				assertFalse(InvMaxNInMappings(intersectionMap2, 1));
				assertFalse(InvMaxNInMappings(intersectionMap3, 2));
			);
		
		
		
		--------------------- InvIdInMap -----------------------
		
		protected TestCityMapINVidInMap : () ==> ()
			TestCityMapINVidInMap() == (
				dcl idMap : map nat to nat := { 1 |-> 2, 2 |-> 3, 3 |-> 4 };
				
				assertTrue(InvIdInMap(idMap, 1));
				assertTrue(InvIdInMap(idMap, 2));
				assertTrue(InvIdInMap(idMap, 3));
			);
			
		
		protected TestCityMapINVidInMapFail : () ==> ()
			TestCityMapINVidInMapFail() == (
				dcl idMap : map nat to nat := { 1 |-> 2, 2 |-> 3, 3 |-> 4 };
				
				assertFalse(InvIdInMap(idMap, 4));
				assertFalse(InvIdInMap(idMap, 5));
			);
		
		
		
		------------------ maxNIdenticalInSeq ------------------
		
		protected TestCityMapINVmaxNIdenticalInSeqEmpty : () ==> ()
			TestCityMapINVmaxNIdenticalInSeqEmpty() == (
				dcl natSeq : seq of nat := [];
				
				assertTrue(maxNIdenticalInSeq(natSeq, 1));
				assertTrue(maxNIdenticalInSeq(natSeq, 2));
			);
			
		
		protected TestCityMapINVmaxNIdenticalInSeq : () ==> ()
			TestCityMapINVmaxNIdenticalInSeq() == (
				dcl natSeq1 : seq of nat := [1, 2, 3];
				dcl natSeq2 : seq of nat := [1, 2, 3, 1, 4, 3, 5];
				dcl natSeq3 : seq of nat := [1, 2, 3, 1, 4, 3, 5, 2, 1, 4, 3, 4];
				dcl natSeq4 : seq of nat := [4, 4, 4, 4];
				
				assertTrue(maxNIdenticalInSeq(natSeq1, 1));
				assertTrue(maxNIdenticalInSeq(natSeq2, 2));
				assertTrue(maxNIdenticalInSeq(natSeq3, 3));
				assertTrue(maxNIdenticalInSeq(natSeq4, 4));
			);
			
			
		protected TestCityMapINVmaxNIdenticalInSeqFail : () ==> ()
			TestCityMapINVmaxNIdenticalInSeqFail() == (
				dcl natSeq1 : seq of nat := [1, 2, 3];
				dcl natSeq2 : seq of nat := [1, 2, 3, 1, 4, 3, 5];
				dcl natSeq3 : seq of nat := [1, 2, 3, 1, 4, 3, 5, 2, 1, 4, 3, 4, 1];
				dcl natSeq4 : seq of nat := [4, 4, 4, 4];
				
				assertFalse(maxNIdenticalInSeq(natSeq1, 0));
				assertFalse(maxNIdenticalInSeq(natSeq2, 1));
				assertFalse(maxNIdenticalInSeq(natSeq3, 2));
				assertFalse(maxNIdenticalInSeq(natSeq3, 3));
				assertFalse(maxNIdenticalInSeq(natSeq4, 3));
			);
			
			
			
		------------------ countElementInSeq ------------------
		
		protected TestCityMapINVcountElementInSeqEmptySeq : () ==> ()
			TestCityMapINVcountElementInSeqEmptySeq() == (
				dcl natSeq : seq of nat := [];
				
				assertTrue(countElementInSeq(natSeq, 1) = 0);
				assertTrue(countElementInSeq(natSeq, 123) = 0);
				assertTrue(countElementInSeq(natSeq, 7) = 0);
			);
			
			
		protected TestCityMapINVcountElementInSeqNotInSeq : () ==> ()
			TestCityMapINVcountElementInSeqNotInSeq() == (
				dcl natSeq : seq of nat := [1, 2, 3];
				
				assertTrue(countElementInSeq(natSeq, 4) = 0);
				assertTrue(countElementInSeq(natSeq, 5) = 0);
				assertTrue(countElementInSeq(natSeq, new Road()) = 0);
			);
			
			
		protected TestCityMapINVcountElementInSeqOneInSeq : () ==> ()
			TestCityMapINVcountElementInSeqOneInSeq() == (
				dcl natSeq : seq of nat := [1, 2, 3];
				
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadSeq : seq of Road := [roadA, roadB];
				
				dcl stringSeq : seq of seq of char := ["Hej", "med", "dig"];
				dcl tupleSeq : seq of (nat * nat) := [mk_(1, 2), mk_(2, 3), mk_(3, 1)];				
				
				assertTrue(countElementInSeq(natSeq, 1) = 1);
				assertTrue(countElementInSeq(natSeq, 2) = 1);
				assertTrue(countElementInSeq(natSeq, 3) = 1);
				
				assertTrue(countElementInSeq(roadSeq, roadA) = 1);
				assertTrue(countElementInSeq(roadSeq, roadB) = 1);
				
				assertTrue(countElementInSeq(stringSeq, "Hej") = 1);
				assertTrue(countElementInSeq(stringSeq, "med") = 1);
				assertTrue(countElementInSeq(stringSeq, "dig") = 1);
				
				assertTrue(countElementInSeq(tupleSeq, mk_(1, 2)) = 1);
				assertTrue(countElementInSeq(tupleSeq, mk_(2, 3)) = 1);
				assertTrue(countElementInSeq(tupleSeq, mk_(3, 1)) = 1);
			);
			
			
		protected TestCityMapINVcountElementInSeqMultipleInSeq : () ==> ()
			TestCityMapINVcountElementInSeqMultipleInSeq() == (
				dcl natSeq : seq of nat := [1, 2, 3, 2, 3, 3];
				
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadSeq : seq of Road := [roadA, roadB, roadA];
				
				dcl stringSeq : seq of seq of char := ["Hej", "med", "dig", "med", "Hej", "dig", "med"];
				dcl tupleSeq : seq of (nat * nat) := [mk_(1, 2), mk_(2, 3), mk_(3, 1), mk_(1, 2), mk_(1, 2), mk_(3, 1), mk_(1, 2)];				
				
				assertTrue(countElementInSeq(natSeq, 1) = 1);
				assertTrue(countElementInSeq(natSeq, 2) = 2);
				assertTrue(countElementInSeq(natSeq, 3) = 3);
				
				assertTrue(countElementInSeq(roadSeq, roadA) = 2);
				assertTrue(countElementInSeq(roadSeq, roadB) = 1);
				
				assertTrue(countElementInSeq(stringSeq, "Hej") = 2);
				assertTrue(countElementInSeq(stringSeq, "med") = 3);
				assertTrue(countElementInSeq(stringSeq, "dig") = 2);
				
				assertTrue(countElementInSeq(tupleSeq, mk_(1, 2)) = 4);
				assertTrue(countElementInSeq(tupleSeq, mk_(2, 3)) = 1);
				assertTrue(countElementInSeq(tupleSeq, mk_(3, 1)) = 2);
			);
			
			
		
		---------------------- addToIdMap ---------------------
		
		protected TestCityMapINVaddToIdMapEmpty : () ==> ()
			TestCityMapINVaddToIdMapEmpty() == (
				dcl idToInterMap : idInterMap_t := { |-> };
				dcl idToRoadMap : idRoadMap_t := { |-> };
				
				dcl newInter : Intersection := new Intersection(123);
				dcl newRoad : Road := new Road(456, 2, 1);
				
				dcl expectedInterMap : idInterMap_t := {123 |-> newInter};
				dcl expectedRoadMap : idRoadMap_t := {456 |-> newRoad};
				
				assertTrue(addToIdMap(idToInterMap, newInter) = expectedInterMap);
				assertTrue(addToIdMap(idToRoadMap, newRoad) = expectedRoadMap);
				
				assertTrue(addToIdMap(idToRoadMap, newRoad)(456) = newRoad);
				assertTrue(addToIdMap(idToRoadMap, newRoad)(456).getLength() = 2);
			);
		
		
		protected TestCityMapINVaddToIdMapIntersection : () ==> ()
			TestCityMapINVaddToIdMapIntersection() == (
				dcl interA : Intersection := new Intersection(1);
				dcl interB : Intersection := new Intersection(2);
				dcl interC : Intersection := new Intersection(3);
				dcl interD : Intersection := new Intersection(4);
			
				dcl idToInterMap : idInterMap_t := { 1 |-> interA, 2 |-> interB };				
				dcl expectedInterMap1 : idInterMap_t := { 1 |-> interA, 2 |-> interB, 3 |-> interC };
				dcl expectedInterMap2 : idInterMap_t := { 1 |-> interA, 2 |-> interB, 3 |-> interC, 4 |-> interD };
				
				assertTrue(addToIdMap(idToInterMap, interC) = expectedInterMap1);
				assertTrue(addToIdMap(addToIdMap(idToInterMap, interC), interD) = expectedInterMap2);
			);
		
		
		
		---------------- addNewInterToInterMap -----------------
		
		protected TestCityMapINVaddNewInterToInterMapEmpty : () ==> ()
			TestCityMapINVaddNewInterToInterMapEmpty() == (
				dcl interMap : intersectionMap_t := { |-> };
				dcl newInter : Intersection := new Intersection(123);
				
				dcl expectedMap : intersectionMap_t := { 123 |-> [] };
				
				assertTrue(addNewInterToInterMap(interMap, newInter) = expectedMap);
				assertTrue(addNewInterToInterMap(interMap, newInter)(123) = []);
			);
			
			
		protected TestCityMapINVaddNewInterToInterMapNew : () ==> ()
			TestCityMapINVaddNewInterToInterMapNew() == (
				dcl interMap : intersectionMap_t := {1 |-> [1, 2, 3], 2 |-> [3, 4, 5]};
				dcl newInter : Intersection := new Intersection(123);
				
				dcl expectedMap : intersectionMap_t := {1 |-> [1, 2, 3], 2 |-> [3, 4, 5], 123 |-> [] };
				
				assertTrue(addNewInterToInterMap(interMap, newInter) = expectedMap);
				assertTrue(addNewInterToInterMap(interMap, newInter)(123) = []);
			);
			
			
		protected TestCityMapINVaddNewInterToInterMapAlreadyThere : () ==> ()
			TestCityMapINVaddNewInterToInterMapAlreadyThere() == (
				dcl interMap : intersectionMap_t := {1 |-> [1, 2, 3], 2 |-> [3, 4, 5], 123 |-> [1, 3, 5]};
				dcl newInter : Intersection := new Intersection(123);
				
				dcl expectedMap : intersectionMap_t := {1 |-> [1, 2, 3], 2 |-> [3, 4, 5], 123 |-> [1, 3, 5] };
				
				assertTrue(addNewInterToInterMap(interMap, newInter) = expectedMap);
				assertTrue(addNewInterToInterMap(interMap, newInter)(123) = [1, 3, 5]);
			);


		
		---------------- addNewRoadToInterMap -----------------
		
		protected TestCityMapINVaddNewRoadToInterMapEmpty : () ==> ()
			TestCityMapINVaddNewRoadToInterMapEmpty() == (
				dcl interA : Intersection := new Intersection(1);
				dcl roadA : Road := new Road();
				
				dcl interMap : intersectionMap_t := {1 |-> []};
				dcl expectedMap : intersectionMap_t := {1 |-> [roadA.getID()]};
				
				assertTrue(addNewRoadToInterMap(interMap, roadA, interA) = expectedMap);
				assertTrue(addNewRoadToInterMap(interMap, roadA, interA)(1) = [roadA.getID()]);
			);
			
		
		protected TestCityMapINVaddNewRoadToInterMap : () ==> ()
			TestCityMapINVaddNewRoadToInterMap() == (
				dcl interA : Intersection := new Intersection(1);
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				
				dcl interMap : intersectionMap_t := {1 |-> [roadA.getID()], 2 |-> []};
				dcl expectedMap : intersectionMap_t := {1 |-> [roadA.getID(), roadB.getID()], 2 |-> []};
				
				assertTrue(addNewRoadToInterMap(interMap, roadB, interA) = expectedMap);
				assertTrue(addNewRoadToInterMap(interMap, roadB, interA)(1) = [roadA.getID(), roadB.getID()]);
			);
			
		
		protected TestCityMapINVaddNewRoadToInterMapTwoTimes : () ==> ()
			TestCityMapINVaddNewRoadToInterMapTwoTimes() == (
				dcl interA : Intersection := new Intersection(1);
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				
				dcl interMap : intersectionMap_t := {1 |-> [roadA.getID()], 2 |-> []};
				dcl expectedMap1 : intersectionMap_t := {1 |-> [roadA.getID(), roadB.getID()], 2 |-> []};
				dcl expectedMap2 : intersectionMap_t := {1 |-> [roadA.getID(), roadB.getID(), roadA.getID()], 2 |-> []};
				
				assertTrue(addNewRoadToInterMap(interMap, roadB, interA) = expectedMap1);
				assertTrue(addNewRoadToInterMap(addNewRoadToInterMap(interMap, roadB, interA), roadA, interA) = expectedMap2);
				assertTrue(addNewRoadToInterMap(addNewRoadToInterMap(interMap, roadB, interA), roadA, interA)(1) = [roadA.getID(), roadB.getID(), roadA.getID()]);
			);
			
			
			
		-------------------- addToRoadMap ---------------------
		
		protected TestCityMapINVaddToRoadMapEmpty : () ==> ()
			TestCityMapINVaddToRoadMapEmpty() == (
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl roadA : Road := new Road();
				
				dcl roadMap : roadMap_t := {|->};
				dcl expectedMap : roadMap_t := {roadA.getID() |-> mk_(interA.getID(), interB.getID())};
				
				assertTrue(addToRoadMap(roadMap, roadA, interA, interB) = expectedMap);
				assertTrue(addToRoadMap(roadMap, roadA, interA, interB)(roadA.getID()) = mk_(interA.getID(), interB.getID()));
			);
			
		
		protected TestCityMapINVaddToRoadMap : () ==> ()
			TestCityMapINVaddToRoadMap() == (
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				
				dcl roadMap : roadMap_t := {roadA.getID() |-> mk_(interA.getID(), interB.getID())};
				dcl expectedMap : roadMap_t := { roadA.getID() |-> mk_(interA.getID(), interB.getID()), 
																				 roadB.getID() |-> mk_(interA.getID(), interC.getID()) };
				
				assertTrue(addToRoadMap(roadMap, roadB, interA, interC) = expectedMap);
				assertTrue(addToRoadMap(roadMap, roadA, interA, interB)(roadA.getID()) = mk_(interA.getID(), interB.getID()));
				assertTrue(addToRoadMap(roadMap, roadB, interA, interC)(roadB.getID()) = mk_(interA.getID(), interC.getID()));
			);
			
			
		protected TestCityMapINVaddToRoadMapOverride : () ==> ()
			TestCityMapINVaddToRoadMapOverride() == (
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				
				dcl roadMap : roadMap_t := { roadA.getID() |-> mk_(interA.getID(), interB.getID()), 
																		 roadB.getID() |-> mk_(interA.getID(), interC.getID()) };
				dcl expectedMap : roadMap_t := { roadA.getID() |-> mk_(interA.getID(), interB.getID()), 
																				 roadB.getID() |-> mk_(interA.getID(), interC.getID()) };
				
				assertTrue(roadMap = expectedMap);
				assertTrue(roadMap(roadA.getID()) = mk_(interA.getID(), interB.getID()));
				
				expectedMap := { roadA.getID() |-> mk_(interB.getID(), interA.getID()), 
												 roadB.getID() |-> mk_(interA.getID(), interC.getID()) };
				
				assertTrue(addToRoadMap(roadMap, roadA, interB, interA) = expectedMap);
				assertTrue(addToRoadMap(roadMap, roadA, interB, interA)(roadA.getID()) = mk_(interB.getID(), interA.getID()));
				assertTrue(addToRoadMap(roadMap, roadA, interB, interA)(roadB.getID()) = mk_(interA.getID(), interC.getID()));
			);
		
		
		
		-------------------- Constructor ---------------------

		protected TestCityMapConstructorEmpty : () ==> ()
			TestCityMapConstructorEmpty() == (
				dcl cityMap : CityMap := new CityMap();
				
				assertTrue(isofclass(CityMap, cityMap));
				assertTrue(cityMap.getSetOfInter() = {});
				assertTrue(cityMap.getSetOfRoad() = {});
			);
			
			
		protected TestCityMapConstructorCopyEmptyCity : () ==> ()
			TestCityMapConstructorCopyEmptyCity() == (
				dcl cityMapA : CityMap := new CityMap();
				dcl cityMapB : CityMap := new CityMap(cityMapA);
				
				assertTrue(isofclass(CityMap, cityMapB));
				assertTrue(cityMapA.getSetOfInter() = cityMapB.getSetOfInter());
				assertTrue(cityMapA.getSetOfRoad() = cityMapB.getSetOfRoad());
			);
			
			
		protected TestCityMapConstructorCopy : () ==> ()
			TestCityMapConstructorCopy() == (
				dcl cityMapA : CityMap := new CityMap();
				dcl cityMapB : CityMap;
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadC : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				cityMapA.addIntersection(interA);
				cityMapA.addIntersection(interB);
				cityMapA.addIntersection(interC);
				cityMapA.addRoad(roadA, interA, interB);
				cityMapA.addRoad(roadB, interB, interC);
				cityMapA.addRoad(roadC, interC, interA);
				
				cityMapB := new CityMap(cityMapA);
				
				assertTrue(cityMapA.getSetOfInter() = cityMapB.getSetOfInter());
				assertTrue(cityMapA.getSetOfRoad() = cityMapB.getSetOfRoad());
			);
			
			
			
		------------------ addIntersection -------------------
		protected TestCityMapAddIntersection : () ==> ()
			TestCityMapAddIntersection() == (
				dcl cityMap : CityMap := new CityMap();
				dcl interA : Intersection := new Intersection();
				
				assertTrue(cityMap.getSetOfInter() = {});
				
				cityMap.addIntersection(interA);
				
				assertTrue(cityMap.getSetOfInter() = {interA});
				assertTrue(cityMap.getSeqOfRoad(interA) = []);
				assertTrue(cityMap.getSetOfRoad() = {});
			);
			
		
		protected TestCityMapAddIntersectionMultiple : () ==> ()
			TestCityMapAddIntersectionMultiple() == (
				dcl cityMap : CityMap := new CityMap();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				assertTrue(cityMap.getSetOfInter() = {interA});
				assertTrue(cityMap.getSeqOfRoad(interA) = []);
				
				cityMap.addIntersection(interB);
				assertTrue(cityMap.getSetOfInter() = {interA, interB});
				assertTrue(cityMap.getSeqOfRoad(interB) = []);
				
				cityMap.addIntersection(interC);
				assertTrue(cityMap.getSetOfInter() = {interA, interB, interC});
				assertTrue(cityMap.getSeqOfRoad(interC) = []);
				
				assertTrue(cityMap.getSetOfRoad() = {});
			);		
		
		
			
		---------------------- addRoad -----------------------
		protected TestCityMapAddRoad : () ==> ()
			TestCityMapAddRoad() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				assertTrue(cityMap.getSetOfRoad() = {});
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				
				assertTrue(cityMap.getSetOfRoad() = {roadA});
				assertTrue(cityMap.getSetOfInter() = {interA, interB});
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interA, interB));
			);
			
		
		protected TestCityMapAddRoadToSameInter : () ==> ()
			TestCityMapAddRoadToSameInter() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl interA : Intersection := new Intersection();
				
				assertTrue(cityMap.getSetOfRoad() = {});
				
				cityMap.addIntersection(interA);
				cityMap.addRoad(roadA, interA, interA);
				
				assertTrue(cityMap.getSetOfRoad() = {roadA});
				assertTrue(cityMap.getSetOfInter() = {interA});
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interA, interA));
			);
			
		
		protected TestCityMapAddRoadMultiple : () ==> ()
			TestCityMapAddRoadMultiple() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadC : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				assertTrue(cityMap.getSetOfRoad() = {});
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				
				assertTrue(cityMap.getSetOfRoad() = {roadA});
				assertTrue(cityMap.getSetOfInter() = {interA, interB});
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interA, interB));
				
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadB, interB, interC);
				
				assertTrue(cityMap.getSetOfRoad() = {roadA, roadB});
				assertTrue(cityMap.getSetOfInter() = {interA, interB, interC});
				assertTrue(cityMap.getInterTupleFromRoad(roadB) = mk_(interB, interC));
				
				cityMap.addRoad(roadC, interC, interA);
				
				assertTrue(cityMap.getSetOfRoad() = {roadA, roadB, roadC});
				assertTrue(cityMap.getSetOfInter() = {interA, interB, interC});
				assertTrue(cityMap.getInterTupleFromRoad(roadC) = mk_(interC, interA));
			);		
		
		
			
		------------------- getSetOfInter --------------------
		
		protected TestCityMapGetSetOfInterEmpty : () ==> ()
			TestCityMapGetSetOfInterEmpty() == (
				dcl cityMap : CityMap := new CityMap();
				
				assertTrue(cityMap.getSetOfInter() = {});
			);
			
		
		protected TestCityMapGetSetOfInter : () ==> ()
			TestCityMapGetSetOfInter() == (
				dcl cityMap : CityMap := new CityMap();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				assertTrue(cityMap.getSetOfRoad() = {});
				
				cityMap.addIntersection(interA);
				assertTrue(cityMap.getSetOfInter() = {interA});
				
				cityMap.addIntersection(interB);
				assertTrue(cityMap.getSetOfInter() = {interA, interB});
				
				cityMap.addIntersection(interC);
				assertTrue(cityMap.getSetOfInter() = {interA, interB, interC});
			);
		
		
		
		-------------------- getSetOfRoad --------------------	
		
		protected TestCityMapGetSetOfRoadEmpty : () ==> ()
			TestCityMapGetSetOfRoadEmpty() == (
				dcl cityMap : CityMap := new CityMap();
				
				assertTrue(cityMap.getSetOfRoad() = {});
			);
			
		
		protected TestCityMapGetSetOfRoad : () ==> ()
			TestCityMapGetSetOfRoad() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadC : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				assertTrue(cityMap.getSetOfRoad() = {});
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				assertTrue(cityMap.getSetOfRoad() = {roadA});
				
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadB, interB, interC);
				assertTrue(cityMap.getSetOfRoad() = {roadA, roadB});
				
				cityMap.addRoad(roadC, interC, interA);
				assertTrue(cityMap.getSetOfRoad() = {roadA, roadB, roadC});
			);
		
		
		
		------------------- getSeqOfRoad ---------------------	
		
		protected TestCityMapGetSeqOfRoadEmpty : () ==> ()
			TestCityMapGetSeqOfRoadEmpty() == (
				dcl cityMap : CityMap := new CityMap();
				dcl interA : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				assertTrue(cityMap.getSeqOfRoad(interA) = []);
			);
			
		
		protected TestCityMapGetSeqOfRoad : () ==> ()
			TestCityMapGetSeqOfRoad() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadC : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				assertTrue(cityMap.getSeqOfRoad(interA) = []);
				
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				assertTrue(cityMap.getSeqOfRoad(interA) = [roadA]);
				assertTrue(cityMap.getSeqOfRoad(interB) = []);
				
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadB, interB, interC);
				assertTrue(cityMap.getSeqOfRoad(interA) = [roadA]);
				assertTrue(cityMap.getSeqOfRoad(interB) = [roadB]);
				assertTrue(cityMap.getSeqOfRoad(interC) = []);
				
				cityMap.addRoad(roadC, interC, interA);
				assertTrue(cityMap.getSeqOfRoad(interA) = [roadA]);
				assertTrue(cityMap.getSeqOfRoad(interB) = [roadB]);
				assertTrue(cityMap.getSeqOfRoad(interC) = [roadC]);
				
				cityMap.addRoad(roadC, interA, interC);
				assertTrue(cityMap.getSeqOfRoad(interA) = [roadA, roadC]);
			);
		
		
		
		--------------- getInterTupleFromRoad ----------------	
		
		protected TestCityMapGetInterTupleFromRoadSingle : () ==> ()
			TestCityMapGetInterTupleFromRoadSingle() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interA, interB));
			);
			
		
		protected TestCityMapGetInterTupleFromRoadMultiple : () ==> ()
			TestCityMapGetInterTupleFromRoadMultiple() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadC : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interA, interB));
				assertTrue(cityMap.getInterTupleFromRoad(roadB) = mk_(interB, interC));
				assertTrue(cityMap.getInterTupleFromRoad(roadC) = mk_(interC, interA));
			);
			
		
		protected TestCityMapGetInterTupleFromRoadChange : () ==> ()
			TestCityMapGetInterTupleFromRoadChange() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interA, interB));
				
				cityMap.addRoad(roadA, interB, interA);
				assertTrue(cityMap.getInterTupleFromRoad(roadA) = mk_(interB, interA));
			);
		
			
			
		--------------- blockConstruction ----------------			
		
		protected TestCityMapBlockRoad : () ==> ()
			TestCityMapBlockRoad() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				
				assertTrue(cityMap.getRoad(roadA).isBlocked() = false);
				
				cityMap.block(roadA);
				assertTrue(cityMap.getRoad(roadA).isBlocked() = true);
			);
			
		
		protected TestCityMapBlockRoadDouble : () ==> ()
			TestCityMapBlockRoadDouble() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				
				assertTrue(cityMap.getRoad(roadA).isBlocked() = false);
				
				cityMap.block(roadA);
				assertTrue(cityMap.getRoad(roadA).isBlocked() = true);
				
				cityMap.block(roadA);
				assertTrue(cityMap.getRoad(roadA).isBlocked() = true);
			);
			
		
		
		------------------- getRoad --------------------		
		
		protected TestCityMapGetRoadById : () ==> ()
			TestCityMapGetRoadById() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interA);
				
				assertTrue(cityMap.getRoad(roadA.getID()).getID() = roadA.getID());
				assertTrue(cityMap.getRoad(roadB.getID()).getID() = roadB.getID());
			);
			
		
		protected TestCityMapGetRoadByIdChange : () ==> ()
			TestCityMapGetRoadByIdChange() == (
				dcl cityMap : CityMap := new CityMap();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interA);
				
				assertTrue(cityMap.getRoad(roadA.getID()).isBlocked() = false);
				
				cityMap.getRoad(roadA.getID()).close();
				assertTrue(cityMap.getRoad(roadA.getID()).isBlocked() = true);
			);
			
			
				
			
			
end CityMapTests
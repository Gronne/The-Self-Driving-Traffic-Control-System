class HelpStructureTests is subclass of TestCase, Identification
	
	operations
		public HelpStructureTests : seq of char ==> HelpStructureTests
			HelpStructureTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
				TestLengthConstruct();
				TestLengthGetLength();
				TestLengthMatch();
				TestLengthDifference();
				
				TestIdentificationEmptyConstruct();
				TestIdentificationNatConstruct();
				TestIdentificationStringConstruct();
				TestIdentificationSameIds();
				TestIdentificationDifferentIds();
				TestIdentificationGetID();
				TestIdentificationFuncAboveMin();
				
				TestSpeedEmptyConstruct();
				TestSpeedConstruct();
				TestSpeedGetLength();
				TestSpeedMatch();
				TestSpeedDifference();
				
				TestRouteEmptyConstruct();
				TestRouteRouteCopyConstructorEmpty();
				TestRouteRouteCopyConstructorFilled();
				TestRouteAddToRoute();
				TestRouteGetNrOfElements();
				TestRouteGetRouteLength();
				TestRouteGetElement();
				TestRoutePopFront();
				TestRoutePopFrontDecreaseLength();
				TestRoutePopEnd();
				TestRoutePopEndDecreaseLength();
				TestRouteEqualTo();
				
				TestActorObjectConstruct();
				TestActorObjectConstructID();
				TestActorObjectGetID();
				TestActorObjectGetLocation();
				
				TestTimerConstructorEmpty();
				TestTimerConstructor();
				TestTimerGetTime();
				TestTimerStep();
			);
		
		
		
		------------------- Length -------------------
			
		protected TestLengthConstruct : () ==> ()
			TestLengthConstruct() == (
				dcl lengthObject : Length := new Length(100);
				assertTrue(isofclass(Length, lengthObject))
			);
			
		
		protected TestLengthGetLength : () ==> ()
			TestLengthGetLength() == (
				dcl length : nat := 100;
				dcl lengthObject : Length := new Length(length);
				assertTrue(lengthObject.getLength() = length);
			);
			
		
		protected TestLengthMatch : () ==> ()
			TestLengthMatch() == (
				dcl lOA : Length := new Length(100);
				dcl lOB : Length := new Length(100);
				assertTrue(lOA.getLength() = lOB.getLength())
			);
			
			
		protected TestLengthDifference : () ==> ()
			TestLengthDifference() == (
				dcl lOA : Length := new Length(100);
				dcl lOB : Length := new Length(200);
				assertTrue(lOA.getLength() <> lOB.getLength())
			);
		
		
			
		--------------- Identification ---------------
		
		protected TestIdentificationEmptyConstruct : () ==> ()
			TestIdentificationEmptyConstruct() == (
				dcl idO : Identification := new Identification();
				assertTrue(isofclass(Identification, idO));
			);
			
			
		protected TestIdentificationNatConstruct : () ==> ()
			TestIdentificationNatConstruct() == (
				dcl id : Identification`ID_t := 123;
				dcl idO : Identification := new Identification(id);
				assertTrue(idO.getID() = id);
			);
			
		
		protected TestIdentificationStringConstruct : () ==> ()
			TestIdentificationStringConstruct() == (
				dcl id : Identification`ID_t := "idTest";
				dcl idO : Identification := new Identification(id);
				assertTrue(idO.getID() = id);
			);
			
			
		protected TestIdentificationSameIds : () ==> ()
			TestIdentificationSameIds() == (
				dcl id : Identification`ID_t := 123;
				dcl idOA : Identification := new Identification(id);
				dcl idOB : Identification := new Identification(id);
				assertTrue(idOA.getID() = idOB.getID());
			);
			
			
		protected TestIdentificationDifferentIds : () ==> ()
			TestIdentificationDifferentIds() == (
				dcl idOA : Identification := new Identification();
				dcl idOB : Identification := new Identification();
				assertFalse(idOA.getID() = idOB.getID());
			);
			
		
		protected TestIdentificationGetID : () ==> ()
			TestIdentificationGetID() == (
				dcl natID : Identification`ID_t := 123;
				dcl stringID : Identification`ID_t := "123";
				dcl idOA : Identification := new Identification(natID);
				dcl idOB : Identification := new Identification(stringID);
				assertTrue(idOA.getID() = natID);
				assertTrue(idOA.getID() = idOA.getID());
				assertTrue(idOB.getID() = stringID);
				assertTrue(idOB.getID() = idOB.getID());
				assertTrue(idOA.getID() <> idOB.getID() and natID <> stringID);
			);
			
			
		protected TestIdentificationFuncAboveMin : () ==> ()
			TestIdentificationFuncAboveMin() == (
				for all number in set {1,...,10} do assertTrue(Identification`InvAboveMinimum(number));
				for all string in set { "1", "a", "123", "abc", "a1b2"} do assertTrue(Identification`InvAboveMinimum(string));
				assertFalse(Identification`InvAboveMinimum(0));
				assertFalse(Identification`InvAboveMinimum(""));
			);
		
		
		
		-------------------- Speed -------------------
		
		protected TestSpeedEmptyConstruct : () ==> ()
			TestSpeedEmptyConstruct() == (
				dcl sO : Speed := new Speed();
				assertTrue(isofclass(Speed, sO));
				assertTrue(sO.getSpeed() = 0);
			);
			
			
		protected TestSpeedConstruct : () ==> ()
			TestSpeedConstruct() == (
				dcl sO : Speed := new Speed(100);
				assertTrue(isofclass(Speed, sO));
			);
			
		
		protected TestSpeedGetLength : () ==> ()
			TestSpeedGetLength() == (
				dcl speed : nat := 100;
				dcl sO : Speed := new Speed(speed);
				assertTrue(sO.getSpeed() = speed);
			);
			
		
		protected TestSpeedMatch : () ==> ()
			TestSpeedMatch() == (
				dcl sOA : Speed := new Speed(100);
				dcl sOB : Speed := new Speed(100);
				assertTrue(sOA.getSpeed() = sOB.getSpeed())
			);
			
			
		protected TestSpeedDifference : () ==> ()
			TestSpeedDifference() == (
				dcl sOA : Speed := new Speed(100);
				dcl sOB : Speed := new Speed(200);
				assertTrue(sOA.getSpeed() <> sOB.getSpeed())
			);
		
		
		
		------------------- Location -----------------
		
		
		
		-------------------- Route -------------------
		
		protected TestRouteEmptyConstruct : () ==> ()
			TestRouteEmptyConstruct() == (
				dcl rO : Route := new Route();
				assertTrue(isofclass(Route, rO));
				assertTrue(rO.getNrOfElements() = 0);
			);
			
			
		protected TestRouteRouteCopyConstructorEmpty : () ==> ()
			TestRouteRouteCopyConstructorEmpty() == (
				dcl rOA : Route := new Route();
				dcl rOB : Route := new Route(rOA);
				assertTrue(rOA.equalTo(rOB));
				assertTrue(rOB.getNrOfElements() = 0);
			);
			
		
		protected TestRouteRouteCopyConstructorFilled : () ==> ()
			TestRouteRouteCopyConstructorFilled() == (
				dcl rOA : Route := createRoute([new Road(100, 1), new Road(200, 2), new Road(200, 2)]);
				dcl rOB : Route := new Route(rOA);
				assertTrue(rOA.equalTo(rOB));
				assertTrue(rOB.getNrOfElements() = 3);
			);
			
		private createRoute : seq of Road ==> Route
			createRoute(roads) == (
			dcl route : Route := new Route();
			for road in roads do route.addToRoute(road);
			return route;
			);
			
			
		protected TestRouteAddToRoute : () ==> ()
			TestRouteAddToRoute() == (
				dcl rO : Route := new Route();
				dcl roadA : Road := new Road(100, 1);
				dcl roadB : Road := new Road(200, 2);
				rO.addToRoute(roadA);
				assertTrue(rO.getNrOfElements() = 1);
				assertTrue(rO.getElement(1) = roadA);
				rO.addToRoute(roadB);
				assertTrue(rO.getNrOfElements() = 2);
				assertFalse(rO.getNrOfElements() = 1);
				assertTrue(rO.getElement(2) = roadB);
				assertTrue(rO.getElement(2) <> roadA);
			);
			
			
		protected TestRouteGetNrOfElements : () ==> ()
			TestRouteGetNrOfElements() == (
				dcl rO : Route := new Route();
				assertTrue(rO.getNrOfElements() = 0);
				rO.addToRoute(new Road(100, 1));
				assertTrue(rO.getNrOfElements() = 1);
				rO.addToRoute(new Road(100, 1));
				assertTrue(rO.getNrOfElements() = 2);
			);
			
		
		protected TestRouteGetRouteLength : () ==> ()
			TestRouteGetRouteLength() == (
				dcl rO : Route := new Route();
				assertTrue(rO.getNrOfElements() = 0);
				rO.addToRoute(new Road(100, 1));
				assertTrue(rO.getRouteLength() = 100);
				rO.addToRoute(new Road(200, 1));
				assertTrue(rO.getRouteLength() = 300);
			);
			
		
		protected TestRouteGetElement : () ==> ()
			TestRouteGetElement() == (
				dcl roadA : Road := new Road(100, 1);
				dcl roadB : Road := new Road(200, 2);
				dcl rO : Route := createRoute([roadA, roadB]);
				
				assertTrue(rO.getElement(1) = roadA);
				assertFalse(rO.getElement(1) = roadB);
				assertTrue(rO.getElement(2) = roadB);
				assertFalse(rO.getElement(2) = roadA);
			);
						
		
		protected TestRoutePopFront : () ==> ()
			TestRoutePopFront() == (
				dcl roadA : Road := new Road(100, 1);
				dcl roadB : Road := new Road(200, 2);
				dcl rO : Route := createRoute([roadA, roadB]);
				
				dcl roadAC : Road := rO.popFront();
				dcl roadBC : Road := rO.popFront();
				
				assertTrue(roadA = roadAC);
				assertFalse(roadA = roadBC);
				assertTrue(roadB = roadBC);
				assertFalse(roadB = roadAC);
			);
			
		
		protected TestRoutePopFrontDecreaseLength : () ==> ()
			TestRoutePopFrontDecreaseLength() == (
				dcl rO1 : Route := createRoute([new Road(100, 1), new Road(200, 2)]);
				dcl rO2 : Route := createRoute([new Road(100, 1), new Road(200, 2)]);
				dcl roadA : Road := rO2.popFront();
				
				assertTrue(rO1.getNrOfElements() = 2);
				assertTrue(rO2.getNrOfElements() = 1);
			);
			
			
		protected TestRoutePopEnd : () ==> ()
			TestRoutePopEnd() == (
				dcl roadA : Road := new Road(100, 1);
				dcl roadB : Road := new Road(200, 2);
				dcl rO : Route := createRoute([roadA, roadB]);
				
				dcl roadBC : Road := rO.popEnd();
				dcl roadAC : Road := rO.popEnd();
				
				assertTrue(roadA = roadAC);
				assertFalse(roadA = roadBC);
				assertTrue(roadB = roadBC);
				assertFalse(roadB = roadAC);
			);
			
		protected TestRoutePopEndDecreaseLength : () ==> ()
			TestRoutePopEndDecreaseLength() == (
				dcl rO1 : Route := createRoute([new Road(100, 1), new Road(200, 2)]);
				dcl rO2 : Route := createRoute([new Road(100, 1), new Road(200, 2)]);
				dcl roadA : Road := rO2.popEnd();
				
				assertTrue(rO1.getNrOfElements() = 2);
				assertTrue(rO2.getNrOfElements() = 1);
			);
			
			
		protected TestRouteEqualTo : () ==> ()
			TestRouteEqualTo() == (
				dcl rO1 : Route := new Route();
				dcl rO2 : Route := new Route(rO1);
				
				dcl rO3 : Route := createRoute([new Road(100, 1), new Road(200, 2)]);
				dcl rO4 : Route := new Route(rO3);
				dcl rO5 : Route := new Route(rO3);
				dcl road : Road := rO5.popFront();
				
				assertTrue(rO1.equalTo(rO2) and rO2.equalTo(rO1));
				assertTrue(rO3.equalTo(rO4) and rO4.equalTo(rO3));
				assertFalse(rO5.equalTo(rO3) and rO5.equalTo(rO3));
				assertFalse(rO1.equalTo(rO3) and rO3.equalTo(rO1));
			);
		
		
		
		-------------------- Timer -------------------
		protected TestTimerConstructorEmpty : () ==> ()
			TestTimerConstructorEmpty() == (
				dcl timer : Timer := new Timer();
				assertTrue(timer.getTime() > 0);
			);
			
		
		protected TestTimerConstructor : () ==> ()
			TestTimerConstructor() == (
				dcl timer : Timer := new Timer(100);
				assertTrue(timer.getTime() = 100);
			);
			
			
		protected TestTimerGetTime : () ==> ()
			TestTimerGetTime() == (
				dcl timer : Timer := new Timer(100);
				assertTrue(timer.getTime() = 100);
				timer.step(5);
				assertTrue(timer.getTime() = 95);
			);
			
			
		protected TestTimerStep : () ==> ()
			TestTimerStep() == (
				dcl timer : Timer := new Timer(100);
				assertTrue(timer.getTime() = 100);
				timer.step(5);
				assertTrue(timer.getTime() = 95);
				timer.step(5);
				assertTrue(timer.getTime() = 90);
				timer.step(10);
				assertTrue(timer.getTime() = 80);
			);
		
		
		
		----------------- ActorObject ----------------
		
		protected TestActorObjectConstruct : () ==> ()
			TestActorObjectConstruct() == (
				dcl aO : ActorObject := new ActorObject();
				assertTrue(isofclass(ActorObject, aO));
			);
			
			
		protected TestActorObjectConstructID : () ==> ()
			TestActorObjectConstructID() == (
				dcl aO : ActorObject := new ActorObject("A");
				assertTrue(aO.getID() = "A");
			);
			
			
		protected TestActorObjectGetID : () ==> ()
			TestActorObjectGetID() == (
				dcl aO1 : ActorObject := new ActorObject();
				dcl aO2 : ActorObject := new ActorObject();
				dcl id1 : Identification`ID_t := aO1.getID();
				dcl id2 : Identification`ID_t := aO2.getID();
				assertTrue(id1 <> id2);
				assertTrue(is_(id1, Identification`ID_t));
			);
			
			
		protected TestActorObjectGetLocation : () ==> ()
			TestActorObjectGetLocation() == (
				dcl actor : ActorObject := new ActorObject();
				assertTrue(actor.getLocation() = <undefined>);
			);
			
			
			
		
			
			
			
end HelpStructureTests









class City is subclass of ActorObject
	types
		public passiveActor_t = Manual | Pedestrian;

	instance variables
		cityMap_ : CityMap := new CityMap();
		passengers_ : seq of Passenger := [];
		pedestrians_ : set of passiveActor_t := {};
		manualCars_ : set of passiveActor_t := {};
		blockedConstructions : seq of CityMap`construction_types := [];
		newPassengers_ : seq of Passenger := [];
		
		
	inv InvNoMatch(passengers_) and 
			InvOnlyTypeInActorSet[Pedestrian](pedestrians_) and 
			InvOnlyTypeInActorSet[Manual](manualCars_) and
			InvValidRouts(cityMap_, pedestrians_) and
			InvValidRouts(cityMap_, manualCars_);
	
	
	functions
		protected InvNoMatch : seq of ? -> bool
			InvNoMatch(sequence) == len sequence = card elems sequence;
			
			
		protected set2Seq : set of ? -> seq of ?
			set2Seq(setOfX) == if setOfX = {} then []
												 else let x in set setOfX in [x] ^ set2Seq(setOfX\{x})
		measure card setOfX;
		
		
		protected InvOnlyTypeInActorSet[@type] : set of passiveActor_t -> bool
			InvOnlyTypeInActorSet(actorSet) == forall actor in set actorSet & is_(actor, @type);
			
		
		protected locInCityMap : CityMap * CityMap`construction_types -> bool
			locInCityMap(cityMap, location) == if is_(location, Intersection) then (cityMap.getSetOfInter() inter {location}) <> {} 
																				 elseif is_(location, Road) then (cityMap.getSetOfRoad() inter {location}) <> {}
																				 else false;
																				 
		
		protected InvValidRouts : CityMap * set of passiveActor_t -> bool
			InvValidRouts(cityMap, actorSet) == forall actor in set actorSet & validRoute(cityMap, actor.route);
			
		
		protected validRoute : CityMap * Route -> bool
			validRoute(cityMap, route) == forall index in set {1,...,route.getNrOfElements()} & locInCityMap(cityMap, route.getElement(index));
		
		
		protected removeFinishedActors : set of passiveActor_t -> set of passiveActor_t
			removeFinishedActors(actors) == { actor | actor in set actors & actor.getRouteLength() <> 0 };
			
		protected noInactiveActorsInSet : set of passiveActor_t -> bool
			noInactiveActorsInSet(actors) == forall actor in set actors & actor.getRouteLength() <> 0;
		
		
		
	operations
		public City : CityMap ==> City
			City(cityMap) == (
				cityMap_ := cityMap;
			);
			
		
		public getCityMap : () ==> CityMap
			getCityMap() == return cityMap_;
			
		
		public getNewPassenger : () ==> Passenger
			getNewPassenger() == (
				dcl newPassenger : Passenger := hd newPassengers_;
				newPassengers_ := tl newPassengers_;
				return newPassenger;
			)
		pre len newPassengers_ > 0
		post forall passenger in seq newPassengers_ & passenger <> RESULT; 
		
		
		-------------- Internal Operations --------------	
		
		protected createPassenger : CitizenFactory`citizenTypes * Location`loc_t * Location`loc_t ==> ()
			createPassenger(tier, startLocation, destination) == (
				dcl newPassenger : Passenger := CitizenFactory`createPassenger(destination, tier);
				newPassenger.setLocation(startLocation);
				passengers_ := passengers_ ^ [newPassenger];
			)
		pre locInCityMap(cityMap_, startLocation) and locInCityMap(cityMap_, destination);
		
		
		protected createPedestrian : Route ==> ()
			createPedestrian(route) == (
				dcl pedestrian : Pedestrian := CitizenFactory`createPedestrian(route.getElement(route.getNrOfElements()));
				pedestrians_ := pedestrians_ union { pedestrian };
			)
		pre validRoute(cityMap_, route);
			
			
		protected createManualCar : Route ==> ()
			createManualCar(route) == (
				dcl manualCar : Manual := CarFactory`createManualCar();
				manualCars_ := manualCars_ union { manualCar };
			)
		pre validRoute(cityMap_, route);
			
		
		protected block : CityMap`construction_types ==> ()
			block(construction) == (
				cityMap_.block(construction);
			)
		pre locInCityMap(cityMap_, construction);
		
		
		protected open : CityMap`construction_types ==> ()
			open(construction) == (
				cityMap_.open(construction);
			)
		pre locInCityMap(cityMap_, construction);
			
		
		
		
		----------------------- Step() -----------------------
			
		
		protected Step : nat ==> ()
			Step(time) == (
				runStepForSet(pedestrians_, time);
				runStepForSet(manualCars_, time);
				
				pedestrians_ := removeFinishedActors(pedestrians_);
				manualCars_ := removeFinishedActors(manualCars_);
			)
			post noInactiveActorsInSet(pedestrians_) and noInactiveActorsInSet(manualCars_);
		
		private runStepForSet : set of ActorObject * nat ==> ()
			runStepForSet(setOfActor, time) == let actor in set setOfActor in actor.step(time);
			
		




end City






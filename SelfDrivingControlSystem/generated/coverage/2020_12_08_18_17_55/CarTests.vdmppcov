

class CarTests is subclass of TestCase, Car, CarTier, TravelHistory
	
	operations
		public CarTests : seq of char ==> CarTests
			CarTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
				TestCarConstructor();
				TestCarConstructorLength();
				TestCarConstructorIdLength();
				TestCarGetLengthOfCar();
				TestCarUpdateRouteOneElement();
				TestCarUpdateRouteMultipleElement();
				TestCarGetRouteLength();
				
				TestManualCarLength();
				TestManualCarIdLength();
				
				TestCarFactoryCreateManualCar();
				TestCarFactoryCreateManualCarId();
				TestCarFactoryCreateAutoCar();
				TestCarFactoryCreateAutoCarId();
				TestCarFactoryCreateAutoCarTier();
				TestCarFactoryCreateAutoCarIdTier();
				
				TestCarFactoryCreateAutoCarSmall();
				TestCarFactoryCreateAutoCarSmallId();
				TestCarFactoryCreateAutoCarMedium();
				TestCarFactoryCreateAutoCarMediumId();
				TestCarFactoryCreateAutoCarLarge();
				TestCarFactoryCreateAutoCarLargeId();
				
				TestCarTierConstructor();
				TestCarTierConstructorTier();
				TestCarTierGetTier();
				TestCarTierGetSeats();
				TestCarTierGetPrice();
				TestCarTierGetLength();
				
				TestTravelHistoryConstructor();
				TestTravelHistoryPickUp();
				TestTravelHistoryPickUpMultiple();
				TestTravelHistoryDropOff();
				TestTravelHistoryDropOffMultiple();
				TestTravelHistoryNrAfterPickUp();
				TestTravelHistoryCheckPassengerInSeq();
				TestTravelHistoryInvMaxNTimesInSeqNatOne();
				TestTravelHistoryInvMaxNTimesInSeqNatMultiple();
				TestTravelHistoryInvMaxNTimesInSeqStringOne();
				TestTravelHistoryInvMaxNTimesInSeqStringMultiple();
				TestTravelHistoryTimesInSeqNatOne();
				TestTravelHistoryTimesInSeqNatMultiple();
				TestTravelHistoryPassengerInSeq();
				TestTravelHistoryPassengerLastEvent();
			);
			
		
		
		
		-------------- Car --------------
		
		protected TestCarConstructor : () ==> ()
			TestCarConstructor() == (
				dcl car : Car := new Car();
				
				assertTrue(isofclass(Car, car));
				assertTrue(isofbaseclass(ActorObject, car));
			);
			
			
		protected TestCarConstructorLength : () ==> ()
			TestCarConstructorLength() == (
				dcl length : Length`length_t := 123;
				dcl car : Car := new Car(length);
				
				assertTrue(car.getLengthOfCar() = length);
			);
			
			
		protected TestCarConstructorIdLength : () ==> ()
			TestCarConstructorIdLength() == (
				dcl id : Identification`ID_t := "A";
				dcl length : Length`length_t := 123;
				dcl car : Car := new Car(id, length);
				
				assertTrue(car.getID() = id);
				assertTrue(car.getLengthOfCar() = length);
			);
			
			
		protected TestCarGetLengthOfCar : () ==> ()
			TestCarGetLengthOfCar() == (
				dcl length : Length`length_t := 123;
				dcl car : Car := new Car(length);
				
				assertTrue(car.getLengthOfCar() = length);
			);
			
			
		protected TestCarUpdateRouteOneElement : () ==> ()
			TestCarUpdateRouteOneElement() == (
				dcl car : Car := new Car(123);
				dcl route : Route := new Route();
				dcl roadA : Road := new Road("A", 10, 15);
				
				route.addToRoute(roadA);
				car.updateRoute(route);

				assertTrue(car.getRouteLength() = 1);
			);
			
			
		protected TestCarUpdateRouteMultipleElement : () ==> ()
			TestCarUpdateRouteMultipleElement() == (
				dcl car : Car := new Car(123);
				dcl route : Route := new Route();
				dcl roadA : Road := new Road("A", 10, 15);
				
				route.addToRoute(roadA);
				route.addToRoute(roadA);
				car.updateRoute(route);

				assertTrue(car.getRouteLength() = 2);
			);
			
			
		protected TestCarGetRouteLength : () ==> ()
			TestCarGetRouteLength() == (
				dcl car : Car := new Car(123);
				dcl route : Route := new Route();
				
				route.addToRoute(new Road());
				car.updateRoute(route);
				assertTrue(car.getRouteLength() = 1);
				
				route.addToRoute(new Road());
				car.updateRoute(route);
				assertTrue(car.getRouteLength() = 2);
				
				route.addToRoute(new Road());
				car.updateRoute(route);
				assertTrue(car.getRouteLength() = 3);
			);
			
		
		
		-------------- Manual --------------
			
		protected TestManualCarLength : () ==> ()
			TestManualCarLength() == (
				dcl length : Length`length_t := 123;
				dcl manualCar : Manual := new Manual(length);
				
				assertTrue(isofclass(Manual, manualCar));
				assertTrue(isofclass(Car, manualCar));
				assertTrue(isofbaseclass(ActorObject, manualCar));
				assertTrue(manualCar.getLengthOfCar() = length);
				assertTrue(manualCar.getRouteLength() = 0);
			);	
			
		
		protected TestManualCarIdLength : () ==> ()
			TestManualCarIdLength() == (
				dcl id : Identification`ID_t := "A";
				dcl length : Length`length_t := 123;
				dcl manualCar : Manual := new Manual(id, length);
				
				assertTrue(manualCar.getID() = id);
				assertTrue(manualCar.getLengthOfCar() = length);
				assertTrue(manualCar.getRouteLength() = 0);
			);	
			
			
			
		-------------- CarFactory --------------
			
		protected TestCarFactoryCreateManualCar : () ==> ()
			TestCarFactoryCreateManualCar() == (
				dcl manualCar : Manual := CarFactory`createManualCar();
				
				assertTrue(isofclass(Manual, manualCar));
				assertTrue(manualCar.getLengthOfCar() = 300);
			);	
			
			
		protected TestCarFactoryCreateManualCarId : () ==> ()
			TestCarFactoryCreateManualCarId() == (
				dcl manualCar : Manual := CarFactory`createManualCar("A");
				
				assertTrue(manualCar.getID() = "A");
				assertTrue(manualCar.getLengthOfCar() = 300);
			);
			
		
		protected TestCarFactoryCreateAutoCar : () ==> ()
			TestCarFactoryCreateAutoCar() == (
				dcl autoCar : Autonomous := CarFactory`createAutoCar();
				
				assertTrue(isofclass(Autonomous, autoCar));
			);	
			
			
		protected TestCarFactoryCreateAutoCarId : () ==> ()
			TestCarFactoryCreateAutoCarId() == (
				dcl autoCar : Autonomous := CarFactory`createAutoCar("A");
				
				assertTrue(autoCar.getID() = "A");
			);
			
		
		protected TestCarFactoryCreateAutoCarTier : () ==> ()
			TestCarFactoryCreateAutoCarTier() == (
				dcl tierSmall : CarTier`tiers := <small>;
				dcl tierMedium : CarTier`tiers := <medium>;
				dcl tierLarge : CarTier`tiers := <large>;
				dcl autoCarSmall : Autonomous := CarFactory`createAutoCar(tierSmall);
				dcl autoCarMedium : Autonomous := CarFactory`createAutoCar(tierMedium);
				dcl autoCarLarge : Autonomous := CarFactory`createAutoCar(tierLarge);
				
				assertTrue(autoCarSmall.getTier() = tierSmall);
				assertTrue(autoCarMedium.getTier() = tierMedium);
				assertTrue(autoCarLarge.getTier() = tierLarge);
			);
			
			
		protected TestCarFactoryCreateAutoCarIdTier : () ==> ()
			TestCarFactoryCreateAutoCarIdTier() == (
				dcl idSmall : Identification`ID_t := "A";
				dcl idMedium : Identification`ID_t := "B";
				dcl idLarge : Identification`ID_t := "C";
				dcl autoCarSmall : Autonomous := CarFactory`createAutoCar(idSmall, <small>);
				dcl autoCarMedium : Autonomous := CarFactory`createAutoCar(idMedium, <medium>);
				dcl autoCarLarge : Autonomous := CarFactory`createAutoCar(idLarge, <large>);	
				
				assertTrue(autoCarSmall.getID() = idSmall);
				assertTrue(autoCarMedium.getID() = idMedium);
				assertTrue(autoCarLarge.getID() = idLarge);
			);
			
			
		protected TestCarFactoryCreateAutoCarSmall : () ==> ()
			TestCarFactoryCreateAutoCarSmall() == (
				dcl autoCar : Autonomous := CarFactory`createSmallAutoCar();
				
				assertTrue(autoCar.getTier() = <small>);
			);
			
		
		protected TestCarFactoryCreateAutoCarSmallId : () ==> ()
			TestCarFactoryCreateAutoCarSmallId() == (
				dcl autoCar : Autonomous := CarFactory`createSmallAutoCar("A");
				
				assertTrue(autoCar.getTier() = <small>);
				assertTrue(autoCar.getID() = "A");
			);
			
			
		protected TestCarFactoryCreateAutoCarMedium : () ==> ()
			TestCarFactoryCreateAutoCarMedium() == (
				dcl autoCar : Autonomous := CarFactory`createMediumAutoCar();
				
				assertTrue(autoCar.getTier() = <medium>);
			);
			
		
		protected TestCarFactoryCreateAutoCarMediumId : () ==> ()
			TestCarFactoryCreateAutoCarMediumId() == (
				dcl autoCar : Autonomous := CarFactory`createMediumAutoCar("A");
				
				assertTrue(autoCar.getTier() = <medium>);
				assertTrue(autoCar.getID() = "A");
			);
			
		
		protected TestCarFactoryCreateAutoCarLarge : () ==> ()
			TestCarFactoryCreateAutoCarLarge() == (
				dcl autoCar : Autonomous := CarFactory`createLargeAutoCar();
				
				assertTrue(autoCar.getTier() = <large>);
			);
			
		
		protected TestCarFactoryCreateAutoCarLargeId : () ==> ()
			TestCarFactoryCreateAutoCarLargeId() == (
				dcl autoCar : Autonomous := CarFactory`createLargeAutoCar("A");
				
				assertTrue(autoCar.getTier() = <large>);
				assertTrue(autoCar.getID() = "A");
			);
			
			
			
		-------------- CarTier --------------
		
		protected TestCarTierConstructor : () ==> ()
			TestCarTierConstructor() == (
				dcl tier : CarTier := new CarTier();
				
				assertTrue(isofclass(CarTier, tier));
				assertTrue(tier.getTier() = <medium>);
			);
			
		
		protected TestCarTierConstructorTier : () ==> ()
			TestCarTierConstructorTier() == (
				dcl tierSmall : CarTier := new CarTier(<small>);
				dcl tierMedium : CarTier := new CarTier(<medium>);
				dcl tierLarge : CarTier := new CarTier(<large>);
				
				assertTrue(tierSmall.getTier() = <small>);
				assertTrue(tierMedium.getTier() = <medium>);
				assertTrue(tierLarge.getTier() = <large>);
			);
			
			
		protected TestCarTierGetTier : () ==> ()
			TestCarTierGetTier() == (
				dcl tierSmall : CarTier := new CarTier(<small>);
				dcl tierMedium : CarTier := new CarTier(<medium>);
				dcl tierLarge : CarTier := new CarTier(<large>);
				
				assertTrue(tierSmall.getTier() = <small>);
				assertTrue(tierMedium.getTier() = <medium>);
				assertTrue(tierLarge.getTier() = <large>);
			);
			
			
		protected TestCarTierGetSeats : () ==> ()
			TestCarTierGetSeats() == (
				dcl tierSmall : CarTier := new CarTier(<small>);
				dcl tierMedium : CarTier := new CarTier(<medium>);
				dcl tierLarge : CarTier := new CarTier(<large>);
				
				assertTrue(tierSmall.getSeats() = tierToSeatMap(<small>));
				assertTrue(tierMedium.getSeats() = tierToSeatMap(<medium>));
				assertTrue(tierLarge.getSeats() = tierToSeatMap(<large>));
			);
			
			
		protected TestCarTierGetPrice : () ==> ()
			TestCarTierGetPrice() == (
				dcl tierSmall : CarTier := new CarTier(<small>);
				dcl tierMedium : CarTier := new CarTier(<medium>);
				dcl tierLarge : CarTier := new CarTier(<large>);
				
				assertTrue(tierSmall.getPrice() = tierToPriceMap(<small>));
				assertTrue(tierMedium.getPrice() = tierToPriceMap(<medium>));
				assertTrue(tierLarge.getPrice() = tierToPriceMap(<large>));
			);
			
		
		protected TestCarTierGetLength : () ==> ()
			TestCarTierGetLength() == (
				dcl tierSmall : CarTier := new CarTier(<small>);
				dcl tierMedium : CarTier := new CarTier(<medium>);
				dcl tierLarge : CarTier := new CarTier(<large>);
				
				assertTrue(tierSmall.getLength() = tierToLengthMap(<small>));
				assertTrue(tierMedium.getLength() = tierToLengthMap(<medium>));
				assertTrue(tierLarge.getLength() = tierToLengthMap(<large>));
			);
		
		
		
		-------------- TravelHistory -------------
		
		protected TestTravelHistoryConstructor : () ==> ()
			TestTravelHistoryConstructor() == (
				dcl history : TravelHistory := new TravelHistory();
				
				assertTrue(isofclass(TravelHistory, history));		
			);
			
			
		protected TestTravelHistoryPickUp : () ==> ()
			TestTravelHistoryPickUp() == (
				dcl history : TravelHistory := new TravelHistory();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				assertTrue(not history.checkPassengerInSeq(passengerA));
				history.pickUp(passengerA);
				assertTrue(history.checkPassengerInSeq(passengerA));
			);
			
		
		protected TestTravelHistoryPickUpMultiple : () ==> ()
			TestTravelHistoryPickUpMultiple() == (
				dcl history : TravelHistory := new TravelHistory();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				assertTrue(not history.checkPassengerInSeq(passengerA));
				history.pickUp(passengerA);
				assertTrue(history.checkPassengerInSeq(passengerA));
				
				assertTrue(not history.checkPassengerInSeq(passengerB));
				history.pickUp(passengerB);
				assertTrue(history.checkPassengerInSeq(passengerB));
				
				assertTrue(not history.checkPassengerInSeq(passengerC));
				history.pickUp(passengerC);
				assertTrue(history.checkPassengerInSeq(passengerC));
			);
			
			
		protected TestTravelHistoryDropOff : () ==> ()
			TestTravelHistoryDropOff() == (
				dcl history : TravelHistory := new TravelHistory();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				assertTrue(not history.checkPassengerInSeq(passengerA));
				history.pickUp(passengerA);
				assertTrue(history.checkPassengerInSeq(passengerA));
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 0);
				history.dropOff(passengerA);
				assertTrue(history.checkPassengerInSeq(passengerA));
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 1);
			);
		
		
		protected TestTravelHistoryDropOffMultiple : () ==> ()
			TestTravelHistoryDropOffMultiple() == (
				dcl history : TravelHistory := new TravelHistory();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				assertTrue(not history.checkPassengerInSeq(passengerA));
				assertTrue(not history.checkPassengerInSeq(passengerB));
				assertTrue(not history.checkPassengerInSeq(passengerC));
				history.pickUp(passengerA);
				history.pickUp(passengerB);
				history.pickUp(passengerC);
				history.dropOff(passengerA);
				history.dropOff(passengerB);
				history.dropOff(passengerC);
				assertTrue(history.checkPassengerInSeq(passengerA));
				assertTrue(history.checkPassengerInSeq(passengerB));
				assertTrue(history.checkPassengerInSeq(passengerC));
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 5);
				assertTrue(history.nrEventsAfterPickUp(passengerB) = 4);
				assertTrue(history.nrEventsAfterPickUp(passengerC) = 3);
			);
			
			
		protected TestTravelHistoryNrAfterPickUp : () ==> ()
			TestTravelHistoryNrAfterPickUp() == (
				dcl history : TravelHistory := new TravelHistory();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				history.pickUp(passengerA);
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 0);
				
				history.pickUp(passengerB);
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 1);
				assertTrue(history.nrEventsAfterPickUp(passengerB) = 0);
				
				history.pickUp(passengerC);
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 2);
				assertTrue(history.nrEventsAfterPickUp(passengerB) = 1);
				assertTrue(history.nrEventsAfterPickUp(passengerC) = 0);
				
				history.dropOff(passengerA);
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 3);
				assertTrue(history.nrEventsAfterPickUp(passengerB) = 2);
				assertTrue(history.nrEventsAfterPickUp(passengerC) = 1);
				
				history.dropOff(passengerB);
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 4);
				assertTrue(history.nrEventsAfterPickUp(passengerB) = 3);
				assertTrue(history.nrEventsAfterPickUp(passengerC) = 2);
				
				history.dropOff(passengerC);
				assertTrue(history.nrEventsAfterPickUp(passengerA) = 5);
				assertTrue(history.nrEventsAfterPickUp(passengerB) = 4);
				assertTrue(history.nrEventsAfterPickUp(passengerC) = 3);
			);
			
		
		protected TestTravelHistoryCheckPassengerInSeq : () ==> ()
			TestTravelHistoryCheckPassengerInSeq() == (
				dcl history : TravelHistory := new TravelHistory();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				assertTrue(not history.checkPassengerInSeq(passengerA));
				assertTrue(not history.checkPassengerInSeq(passengerB));
				assertTrue(not history.checkPassengerInSeq(passengerC));
				
				history.pickUp(passengerA);
				assertTrue(history.checkPassengerInSeq(passengerA));
				assertTrue(not history.checkPassengerInSeq(passengerB));
				assertTrue(not history.checkPassengerInSeq(passengerC));
				
				history.pickUp(passengerB);
				assertTrue(history.checkPassengerInSeq(passengerA));
				assertTrue(history.checkPassengerInSeq(passengerB));
				assertTrue(not history.checkPassengerInSeq(passengerC));
				
				history.pickUp(passengerC);
				assertTrue(history.checkPassengerInSeq(passengerA));
				assertTrue(history.checkPassengerInSeq(passengerB));
				assertTrue(history.checkPassengerInSeq(passengerC));
			);
			
			
		protected TestTravelHistoryInvMaxNTimesInSeqNatOne : () ==> ()
			TestTravelHistoryInvMaxNTimesInSeqNatOne() == (
				dcl natSeq : seq of nat := [1, 2, 3, 4];
				
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 2));
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 1));
				assertFalse(TravelHistory`InvMaxNTimesInSeq(natSeq, 0));
			);
			
		
		protected TestTravelHistoryInvMaxNTimesInSeqNatMultiple : () ==> ()
			TestTravelHistoryInvMaxNTimesInSeqNatMultiple() == (
				dcl natSeq : seq of nat := [1, 2, 3, 4, 1, 3, 2, 1, 4, 5];
				
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 4));
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 3));
				assertFalse(TravelHistory`InvMaxNTimesInSeq(natSeq, 2));
			);
			
		
		protected TestTravelHistoryInvMaxNTimesInSeqStringOne : () ==> ()
			TestTravelHistoryInvMaxNTimesInSeqStringOne() == (
				dcl natSeq : seq of seq of char := ["Hej", "med", "dig", "Julemand"];
				
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 2));
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 1));
				assertFalse(TravelHistory`InvMaxNTimesInSeq(natSeq, 0));
			);
			
		
		protected TestTravelHistoryInvMaxNTimesInSeqStringMultiple : () ==> ()
			TestTravelHistoryInvMaxNTimesInSeqStringMultiple() == (
				dcl natSeq : seq of seq of char := ["Hej", "med", "dig", "Julemand", "Hej", "dig", "med", "Hej", "Julemand", "god jul"];
				
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 4));
				assertTrue(TravelHistory`InvMaxNTimesInSeq(natSeq, 3));
				assertFalse(TravelHistory`InvMaxNTimesInSeq(natSeq, 2));
			);
			
		
		protected TestTravelHistoryTimesInSeqNatOne : () ==> ()
			TestTravelHistoryTimesInSeqNatOne() == (
				dcl natSeq : seq of nat := [1, 2, 3, 4];
				
				assertTrue(TravelHistory`timesInSeq(natSeq, 1) = 1);
				assertTrue(TravelHistory`timesInSeq(natSeq, 2) = 1);
				assertTrue(TravelHistory`timesInSeq(natSeq, 3) = 1);
				assertTrue(TravelHistory`timesInSeq(natSeq, 4) = 1);
				assertTrue(TravelHistory`timesInSeq(natSeq, 5) = 0);
			);
			
		
		protected TestTravelHistoryTimesInSeqNatMultiple : () ==> ()
			TestTravelHistoryTimesInSeqNatMultiple() == (
				dcl natSeq : seq of nat := [1, 2, 3, 4, 1, 3, 2, 1, 4, 5];
				
				assertTrue(TravelHistory`timesInSeq(natSeq, 1) = 3);
				assertTrue(TravelHistory`timesInSeq(natSeq, 2) = 2);
				assertTrue(TravelHistory`timesInSeq(natSeq, 3) = 2);
				assertTrue(TravelHistory`timesInSeq(natSeq, 4) = 2);
				assertTrue(TravelHistory`timesInSeq(natSeq, 5) = 1);
			);	
			
			
		protected TestTravelHistoryPassengerInSeq : () ==> ()
			TestTravelHistoryPassengerInSeq() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				dcl history : TravelHistory`history_t := [];
				
				assertTrue(not TravelHistory`passengerInSeq(history, passengerA));
				assertTrue(not TravelHistory`passengerInSeq(history, passengerB));
				assertTrue(not TravelHistory`passengerInSeq(history, passengerC));
				
				history := history ^ [mk_TravelHistory`event_r(passengerA, <pickUp>)];
				assertTrue(TravelHistory`passengerInSeq(history, passengerA));
				assertTrue(not TravelHistory`passengerInSeq(history, passengerB));
				assertTrue(not TravelHistory`passengerInSeq(history, passengerC));
				
				history := history ^ [mk_TravelHistory`event_r(passengerB, <pickUp>)];
				assertTrue(TravelHistory`passengerInSeq(history, passengerA));
				assertTrue(TravelHistory`passengerInSeq(history, passengerB));
				assertTrue(not TravelHistory`passengerInSeq(history, passengerC));
				
				history := history ^ [mk_TravelHistory`event_r(passengerC, <pickUp>)];
				assertTrue(TravelHistory`passengerInSeq(history, passengerA));
				assertTrue(TravelHistory`passengerInSeq(history, passengerB));
				assertTrue(TravelHistory`passengerInSeq(history, passengerC));
			);
			
			
		protected TestTravelHistoryPassengerLastEvent : () ==> ()
			TestTravelHistoryPassengerLastEvent() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				dcl history : TravelHistory`history_t := [];
				
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
				
				history := history ^ [mk_TravelHistory`event_r(passengerA, <pickUp>)];
				assertTrue(TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
				
				history := history ^ [mk_TravelHistory`event_r(passengerB, <pickUp>)];
				assertTrue(TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
				
				history := history ^ [mk_TravelHistory`event_r(passengerC, <pickUp>)];
				assertTrue(TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
				
				history := history ^ [mk_TravelHistory`event_r(passengerA, <dropOff>)];
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
				
				history := history ^ [mk_TravelHistory`event_r(passengerB, <dropOff>)];
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
				
				history := history ^ [mk_TravelHistory`event_r(passengerC, <dropOff>)];
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerA, <pickUp>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerA, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerB, <pickUp>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerB, <dropOff>));
				assertTrue(not TravelHistory`passengerLastEvent(history, passengerC, <pickUp>));
				assertTrue(TravelHistory`passengerLastEvent(history, passengerC, <dropOff>));
			);
			
			
end CarTests








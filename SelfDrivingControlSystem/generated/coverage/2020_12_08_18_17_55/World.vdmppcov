
class World is subclass of City, SelfDrivingControlSystem
				 
		operations
			public Run : () ==> ()
				Run() == (
					dcl simpleCityMap : CityMap := CityMapFileFactory`loadCity("miniCityRoads", "miniCityNodeInfo");
			 		dcl city : City := new City(simpleCityMap);
			 		dcl system : SelfDrivingControlSystem := new SelfDrivingControlSystem(city);					
					
					dcl timeResolution : nat := 10;
					
					for i = 1 to 100 by 1 do (
						dcl events : set of SimulationEvent := getNewEventsForTime(timeResolution * (i - 1), timeResolution * i);
						doEvents(city, system, events);
						city.step(timeResolution);
						system.step(timeResolution);
					);
				);
				
				
				
				
				
				
			protected getNewEventsForTime : nat * nat ==> set of SimulationEvent
				getNewEventsForTime(startTimeInSimulation, endtimeInSimulation) == (
					return{ eventTuple.event | eventTuple in set getSimulationTuple() & eventTuple.time >= startTimeInSimulation and eventTuple.time < endtimeInSimulation }
				);
				
				
			protected getSimulationTuple : () ==> set of SimulationEventTuple
				getSimulationTuple() == return { mk_SimulationEventTuple(0, mk_SimulationEvent("new passenger", new Intersection("AN"), new Intersection("AS"))),
																		mk_SimulationEventTuple(0, mk_SimulationEvent("new pedestrian", new Intersection("AK"), new Intersection("AP"))),
																		mk_SimulationEventTuple(100, mk_SimulationEvent("new passenger", new Intersection("BE"), new Intersection("AN"))),
																		mk_SimulationEventTuple(100, mk_SimulationEvent("new pedestrian", new Intersection("AW"), new Intersection("AX"))),
																		mk_SimulationEventTuple(200, mk_SimulationEvent("block construction", new Intersection("AZ"), new Intersection())),
																		mk_SimulationEventTuple(400, mk_SimulationEvent("open Construction", new Intersection("AZ"), new Intersection()))
																	};
				
			
			protected doEvents : City * SelfDrivingControlSystem * set of SimulationEvent ==> ()
				doEvents(city, system, events) == (
					let event in set events in
						if event.Type = "new passenger" then (
								city.createPassenger(<poor>, event.StartLocation, event.Destination);
								system.newPassenger();
							)
						elseif event.Type = "new pedestrian" then (
									dcl newRoute : Route := RoutePlanner`planRoute(city.getCityMap(), event.StartLocation, event.Destination);
									city.createPedestrian(newRoute);
								)
						elseif event.Type = "new manual car" then (
									dcl newRoute : Route := RoutePlanner`planRoute(city.getCityMap(), event.StartLocation, event.Destination);
									city.createManualCar(newRoute);
								)
						elseif event.Type = "block construction" then (
									city.block(event.StartLocation);
									system.changeInCityMap();
								)
						elseif event.Type = "open construction" then (
									city.open(event.StartLocation);
									system.changeInCityMap();
								)
			 	);
			 	
			 	
		types
			public SimulationEvent :: Type : seq of char
									 							StartLocation : Location`loc_t
									 							Destination : Location`loc_t;
			
			public SimulationEventTuple :: time : nat
																		 event : SimulationEvent;

end World



class CitizenFactory
	types
		public citizenTypes = <poor> | <medium> | <rich>;
		
	values
		private typeWalkingMap : map citizenTypes to Speed`speed_t = { <poor> |-> 7, <medium> |-> 5, <rich> |-> 4 };
		private typeToTierMap : map citizenTypes to CarTier`tiers = { <poor> |-> <large>, <medium> |-> <medium>, <rich> |-> <small> };

	operations
		static public createPedestrian : Location`loc_t ==> Pedestrian
			createPedestrian(destination) == (
				return new Pedestrian(5, destination);
			);
			
			
		static public createPedestrian : Location`loc_t * Speed`speed_t ==> Pedestrian
			createPedestrian(destination, walkingSpeed) == (
				return new Pedestrian(walkingSpeed, destination);
			);
			
			
		static public createPedestrian : Identification`ID_t * Location`loc_t ==> Pedestrian
			createPedestrian(id, destination) == (
				return new Pedestrian(id, 5, destination);
			);
			
			
		static public createPedestrian : Identification`ID_t * Location`loc_t * Speed`speed_t ==> Pedestrian
			createPedestrian(id, destination, walkingSpeed) == (
				return new Pedestrian(id, walkingSpeed, destination);
			);
		
	
	
		static public createPassenger : Location`loc_t ==> Passenger
			createPassenger(destination) == (
				return createPassenger(destination, <medium>);
			);
			
		
		static public createPassenger : Identification`ID_t * Location`loc_t ==> Passenger
			createPassenger(id, destination) == (
				return createPassenger(id, destination, <medium>);
			);
			
			
		static public createPassenger : Location`loc_t * citizenTypes ==> Passenger
			createPassenger(destination, type) == (
				return new Passenger(getWalkingSpeed(type), destination, getCarTier(type));
			);
			
		
		static public createPassenger : Identification`ID_t * Location`loc_t * citizenTypes ==> Passenger
			createPassenger(id, destination, type) == (
				return new Passenger(id, getWalkingSpeed(type), destination, getCarTier(type));
			);
			
			
		static public createPoorPassenger : Location`loc_t ==> Passenger
			createPoorPassenger(destination) == (
				return createPassenger(destination, <poor>);
			);
			
		
		static public createPoorPassenger : Identification`ID_t * Location`loc_t ==> Passenger
			createPoorPassenger(id, destination) == (
				return createPassenger(id, destination, <poor>);
			);
			
		
		static public createMediumPassenger : Location`loc_t ==> Passenger
			createMediumPassenger(destination) == (
				return createPassenger(destination, <medium>);
			);
			
		
		static public createMediumPassenger : Identification`ID_t * Location`loc_t ==> Passenger
			createMediumPassenger(id, destination) == (
				return createPassenger(id, destination, <medium>);
			);
			
		static public createRichPassenger : Location`loc_t ==> Passenger
			createRichPassenger(destination) == (
				return createPassenger(destination, <rich>);
			);
			
		
		static public createRichPassenger : Identification`ID_t * Location`loc_t ==> Passenger
			createRichPassenger(id, destination) == (
				return createPassenger(id, destination, <rich>);
			);
			
			
		
		static protected getWalkingSpeed : citizenTypes ==> Speed`speed_t
			getWalkingSpeed(type) == (
				return typeWalkingMap(type);
			);
			
		static protected getCarTier : citizenTypes ==> CarTier
			getCarTier(type) == (
				return new CarTier(typeToTierMap(type));
			);



end CitizenFactory
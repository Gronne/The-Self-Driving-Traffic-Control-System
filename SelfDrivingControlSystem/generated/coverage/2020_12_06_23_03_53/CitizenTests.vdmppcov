class CitizenTests is subclass of TestCase
	
	operations
		public CitizenTests : seq of char ==> CitizenTests
			CitizenTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
				TestCitizenConstructorSpeedLoc();
				TestCitizenConstructorIdSpeedLoc();
				TestCitizenGetSpeed();
				TestCitizenGetDestination();
				TestCitizenGetID();
				TestCitizenGetLocation();
				
				TestPedestrianConstructorSpeedLoc();
				TestPedestrianConstructorIdSpeedLoc();
				
				TestPassengerConstructorIfOfClasses();
				TestPassengerConstructorSpeedLoc();
				TestPassengerConstructorId();
				TestPassengerConstructorCarTiers();
				TestPassengerGetTier();
				TestPassengerGetTimer();
				
				TestCitizenFactoryCreatePassengerLoc();
				TestCitizenFactoryCreatePassengerIdLoc();
				TestCitizenFactoryCreatePassengerLocTier();
				TestCitizenFactoryCreatePassengerIdLocTier();
				
				TestCitizenFactoryCreatePoorPassenger();
				TestCitizenFactoryCreatePoorPassengerID();
				TestCitizenFactoryCreateMediumPassenger();
				TestCitizenFactoryCreateMediumPassengerID();
				TestCitizenFactoryCreateRichPassenger();
				TestCitizenFactoryCreateRichPassengerID();
				
				TestCitizenFactoryCreatePedestrianDest();
				TestCitizenFactoryCreatePedestrianDestSpeed();
				TestCitizenFactoryCreatePedestrianIdDest();
				TestCitizenFactoryCreatePedestrianIdDestSpeed();
			);
			
			
			----------------- Citizen ----------------
			protected TestCitizenConstructorSpeedLoc : () ==> ()
				TestCitizenConstructorSpeedLoc() == (
					dcl speed : Speed`speed_t := 100;
					dcl destination : Intersection := new Intersection("A");
					dcl citizen : Citizen := new Citizen(speed, destination);
					
					assertTrue(isofclass(Citizen, citizen));
					assertTrue(isofbaseclass(ActorObject, citizen));
					assertTrue(citizen.getSpeed() = speed);
					assertTrue(citizen.getDestination() = destination);
					assertTrue(citizen.getLocation() = Location`undefined_loc);
				);
				
			
			protected TestCitizenConstructorIdSpeedLoc : () ==> ()
				TestCitizenConstructorIdSpeedLoc() == (
					dcl id : Identification`ID_t := 123;
					dcl speed : Speed`speed_t := 100;
					dcl destination : Intersection := new Intersection("A");
					dcl citizen : Citizen := new Citizen(id, speed, destination);
					
					assertTrue(isofclass(Citizen, citizen));
					assertTrue(isofbaseclass(ActorObject, citizen));
					assertTrue(citizen.getSpeed() = speed);
					assertTrue(citizen.getDestination() = destination);
					assertTrue(citizen.getLocation() = Location`undefined_loc);
					assertTrue(citizen.getID() = id);
				);
				
				
			protected TestCitizenGetSpeed : () ==> ()
				TestCitizenGetSpeed() == (
					dcl speedA : Speed`speed_t := 100;
					dcl speedB : Speed`speed_t := 200;
					dcl citizenA : Citizen := new Citizen(speedA, new Intersection());
					dcl citizenB : Citizen := new Citizen(speedB, new Intersection());
					
					assertTrue(citizenA.getSpeed() = speedA);
					assertFalse(citizenA.getSpeed() = speedB);
					
					assertTrue(citizenB.getSpeed() = speedB);
					assertFalse(citizenB.getSpeed() = speedA);
				);
				
			
			protected TestCitizenGetDestination : () ==> ()
				TestCitizenGetDestination() == (
					dcl destinationA : Intersection := new Intersection("A");
					dcl destinationB : Intersection := new Intersection(1);
					dcl citizenA : Citizen := new Citizen(100, destinationA);
					dcl citizenB : Citizen := new Citizen(100, destinationB);
					
					assertTrue(citizenA.getDestination() = destinationA);
					assertFalse(citizenA.getDestination() = destinationB);
					
					assertTrue(citizenB.getDestination() = destinationB);
					assertFalse(citizenB.getDestination() = destinationA);
				);
				
			
			protected TestCitizenGetID : () ==> ()
				TestCitizenGetID() == (
					dcl citizenA : Citizen := new Citizen("A", 100, new Intersection());
					dcl citizenB : Citizen := new Citizen(1, 100, new Intersection());
					
					assertTrue(citizenA.getID() = "A");
					assertTrue(citizenB.getID() = 1);
					assertTrue(citizenA.getID() <> citizenB.getID());
				);
				
			
			
				
			protected TestCitizenGetLocation : () ==> ()
				TestCitizenGetLocation() == (
					dcl citizen : Citizen := new Citizen(100, new Intersection());
					
					assertTrue(citizen.getLocation() = Location`undefined_loc);
				);
			
			
			
			----------------- Pedestrian ----------------
			
			protected TestPedestrianConstructorSpeedLoc : () ==> ()
				TestPedestrianConstructorSpeedLoc() == (
					dcl speed : Speed`speed_t := 100;
					dcl destination : Intersection := new Intersection("A");
					dcl pedestrian : Pedestrian := new Pedestrian(speed, destination);
					
					assertTrue(isofclass(Pedestrian, pedestrian));
					assertTrue(isofclass(Citizen, pedestrian));
					assertTrue(isofbaseclass(ActorObject, pedestrian));
					assertTrue(pedestrian.getSpeed() = speed);
					assertTrue(pedestrian.getDestination() = destination);
					assertTrue(pedestrian.getLocation() = Location`undefined_loc);
				);
				
			
			protected TestPedestrianConstructorIdSpeedLoc : () ==> ()
				TestPedestrianConstructorIdSpeedLoc() == (
					dcl id : Identification`ID_t := 123;
					dcl speed : Speed`speed_t := 100;
					dcl destination : Intersection := new Intersection("A");
					dcl pedestrian : Pedestrian := new Pedestrian(id, speed, destination);
					
					assertTrue(isofclass(Pedestrian, pedestrian));
					assertTrue(isofclass(Citizen, pedestrian));
					assertTrue(isofbaseclass(ActorObject, pedestrian));
					assertTrue(pedestrian.getSpeed() = speed);
					assertTrue(pedestrian.getDestination() = destination);
					assertTrue(pedestrian.getLocation() = Location`undefined_loc);
					assertTrue(pedestrian.getID() = id);
				);
				
				
				
			------------------ Passenger -----------------
			
			protected TestPassengerConstructorIfOfClasses : () ==> ()
				TestPassengerConstructorIfOfClasses() == (
					dcl passenger : Passenger := new Passenger(1, new Intersection(), new CarTier(<medium>));
					
					assertTrue(isofclass(Passenger, passenger));
					assertTrue(isofclass(Citizen, passenger));
					assertTrue(isofbaseclass(ActorObject, passenger));
				);
				
			
			protected TestPassengerConstructorSpeedLoc : () ==> ()
				TestPassengerConstructorSpeedLoc() == (
					dcl speed : Speed`speed_t := 100;
					dcl destination : Intersection := new Intersection("A");
					dcl passenger : Passenger := new Passenger(speed, destination, new CarTier(<medium>));
					
					assertTrue(passenger.getSpeed() = speed);
					assertTrue(passenger.getDestination() = destination);
				);
				
			
			protected TestPassengerConstructorId : () ==> ()
				TestPassengerConstructorId() == (
					dcl id : Identification`ID_t := 123;
					dcl passenger : Passenger := new Passenger(id, 100, new Intersection(), new CarTier(<medium>));
					
					assertTrue(passenger.getID() = id);
				);
				
			
			protected TestPassengerConstructorCarTiers : () ==> ()
				TestPassengerConstructorCarTiers() == (
					dcl tierSmall : CarTier := new CarTier(<small>);
					dcl tierMedium : CarTier := new CarTier(<medium>);
					dcl tierLarge : CarTier := new CarTier(<large>);
					dcl passengerPoor : Passenger := new Passenger(100, new Intersection(), tierLarge);
					dcl passengerMedium : Passenger := new Passenger(100, new Intersection(), tierMedium);
					dcl passengerRich : Passenger := new Passenger(100, new Intersection(), tierSmall);
					
					assertTrue(passengerPoor.getTier() = tierLarge.getTier());
					assertTrue(passengerMedium.getTier() = tierMedium.getTier());
					assertTrue(passengerRich.getTier() = tierSmall.getTier());
				);
				
				
			protected TestPassengerGetTier : () ==> ()
				TestPassengerGetTier() == (
					dcl tierSmall : CarTier := new CarTier(<small>);
					dcl passengerRich : Passenger := new Passenger(100, new Intersection(), tierSmall);
					
					assertTrue(passengerRich.getTier() = tierSmall.getTier());
				);
				
				
			protected TestPassengerGetTimer : () ==> ()
				TestPassengerGetTimer() == (
					dcl passenger : Passenger := new Passenger(100, new Intersection(), new CarTier(<small>));
					
					assertTrue(passenger.getTimer() > 0);
				);
			
			
			
			------------------ CitizenFactory -----------------
			
			protected TestCitizenFactoryCreatePassengerLoc : () ==> ()
				TestCitizenFactoryCreatePassengerLoc() == (
					dcl destination : Intersection := CityConstructionFactory`createIntersection();
					dcl passenger : Passenger := CitizenFactory`createPassenger(destination);
					
					assertTrue(passenger.getDestination() = destination);
				);
				
			
			protected TestCitizenFactoryCreatePassengerIdLoc : () ==> ()
				TestCitizenFactoryCreatePassengerIdLoc() == (
					dcl id : Identification`ID_t := "A";
					dcl destination : Intersection := CityConstructionFactory`createIntersection();
					dcl passenger : Passenger := CitizenFactory`createPassenger(id, destination);
					
					assertTrue(passenger.getID() = id);
					assertTrue(passenger.getDestination() = destination);
				);
				
				
			protected TestCitizenFactoryCreatePassengerLocTier : () ==> ()
				TestCitizenFactoryCreatePassengerLocTier() == (
					dcl passengerPoor : Passenger := CitizenFactory`createPassenger(CityConstructionFactory`createIntersection(), <poor>);
					dcl passengerMedium : Passenger := CitizenFactory`createPassenger(CityConstructionFactory`createIntersection(), <medium>);
					dcl passengerRich : Passenger := CitizenFactory`createPassenger(CityConstructionFactory`createIntersection(), <rich>);
					
					assertTrue(passengerPoor.getTier() = <large>);
					assertTrue(passengerPoor.getSpeed() = 7);
					assertTrue(passengerMedium.getTier() = <medium>);
					assertTrue(passengerMedium.getSpeed() = 5);
					assertTrue(passengerRich.getTier() = <small>);
					assertTrue(passengerRich.getSpeed() = 4);
				);
				
				
			protected TestCitizenFactoryCreatePassengerIdLocTier : () ==> ()
				TestCitizenFactoryCreatePassengerIdLocTier() == (
					dcl idPoor : Identification`ID_t := "Poor";
					dcl passengerPoor : Passenger := CitizenFactory`createPassenger(idPoor, CityConstructionFactory`createIntersection(), <poor>);
					dcl idMedium : Identification`ID_t := "Medium";
					dcl passengerMedium : Passenger := CitizenFactory`createPassenger(idMedium, CityConstructionFactory`createIntersection(), <medium>);
					dcl idRich : Identification`ID_t := "Rich";
					dcl passengerRich : Passenger := CitizenFactory`createPassenger(idRich, CityConstructionFactory`createIntersection(), <rich>);
					
					assertTrue(passengerPoor.getTier() = <large>);
					assertTrue(passengerPoor.getSpeed() = 7);
					assertTrue(passengerPoor.getID() = idPoor);
					assertTrue(passengerMedium.getTier() = <medium>);
					assertTrue(passengerMedium.getSpeed() = 5);
					assertTrue(passengerMedium.getID() = idMedium);
					assertTrue(passengerRich.getTier() = <small>);
					assertTrue(passengerRich.getSpeed() = 4);
					assertTrue(passengerRich.getID() = idRich);
				);
				
				
			protected TestCitizenFactoryCreatePoorPassenger : () ==> ()
				TestCitizenFactoryCreatePoorPassenger() == (
					dcl passenger : Passenger := CitizenFactory`createPoorPassenger(CityConstructionFactory`createIntersection());
					
					assertTrue(passenger.getTier() = <large>);
					assertTrue(passenger.getSpeed() = 7);
				);
				
			
			protected TestCitizenFactoryCreatePoorPassengerID : () ==> ()
				TestCitizenFactoryCreatePoorPassengerID() == (
					dcl id : Identification`ID_t := "Poor";
					dcl passenger : Passenger := CitizenFactory`createPoorPassenger(id, CityConstructionFactory`createIntersection());
					
					assertTrue(passenger.getTier() = <large>);
					assertTrue(passenger.getSpeed() = 7);
					assertTrue(passenger.getID() = id);
				);
				
				
			protected TestCitizenFactoryCreateMediumPassenger : () ==> ()
				TestCitizenFactoryCreateMediumPassenger() == (
					dcl passenger : Passenger := CitizenFactory`createMediumPassenger(CityConstructionFactory`createIntersection());
					
					assertTrue(passenger.getTier() = <medium>);
					assertTrue(passenger.getSpeed() = 5);
				);
				
			
			protected TestCitizenFactoryCreateMediumPassengerID : () ==> ()
				TestCitizenFactoryCreateMediumPassengerID() == (
					dcl id : Identification`ID_t := "Medium";
					dcl passenger : Passenger := CitizenFactory`createMediumPassenger(id, CityConstructionFactory`createIntersection());
					
					assertTrue(passenger.getTier() = <medium>);
					assertTrue(passenger.getSpeed() = 5);
					assertTrue(passenger.getID() = id);
				);
				
				
			protected TestCitizenFactoryCreateRichPassenger : () ==> ()
				TestCitizenFactoryCreateRichPassenger() == (
					dcl passenger : Passenger := CitizenFactory`createRichPassenger(CityConstructionFactory`createIntersection());
					
					assertTrue(passenger.getTier() = <small>);
					assertTrue(passenger.getSpeed() = 4);
				);
				
			
			protected TestCitizenFactoryCreateRichPassengerID : () ==> ()
				TestCitizenFactoryCreateRichPassengerID() == (
					dcl id : Identification`ID_t := "Small";
					dcl passenger : Passenger := CitizenFactory`createRichPassenger(id, CityConstructionFactory`createIntersection());
					
					assertTrue(passenger.getTier() = <small>);
					assertTrue(passenger.getSpeed() = 4);
					assertTrue(passenger.getID() = id);
				);
				
				
			protected TestCitizenFactoryCreatePedestrianDest : () ==> ()
				TestCitizenFactoryCreatePedestrianDest() == (
					dcl destination : Intersection := CityConstructionFactory`createIntersection();
					dcl pedestrian : Pedestrian := CitizenFactory`createPedestrian(destination);
					
					assertTrue(pedestrian.getDestination() = destination);
					assertTrue(pedestrian.getSpeed() = 5);
				);
				
				
			protected TestCitizenFactoryCreatePedestrianDestSpeed : () ==> ()
				TestCitizenFactoryCreatePedestrianDestSpeed() == (
					dcl destination : Intersection := CityConstructionFactory`createIntersection();
					dcl speed : Speed`speed_t := 7;
					dcl pedestrian : Pedestrian := CitizenFactory`createPedestrian(destination, speed);
					
					assertTrue(pedestrian.getDestination() = destination);
					assertTrue(pedestrian.getSpeed() = speed);
				);
				
			
			protected TestCitizenFactoryCreatePedestrianIdDest : () ==> ()
				TestCitizenFactoryCreatePedestrianIdDest() == (
					dcl id : Identification`ID_t := "A";
					dcl destination : Intersection := CityConstructionFactory`createIntersection();
					dcl pedestrian : Pedestrian := CitizenFactory`createPedestrian(id, destination);
					
					assertTrue(pedestrian.getID() = id);
					assertTrue(pedestrian.getDestination() = destination);
				);
				
				
			protected TestCitizenFactoryCreatePedestrianIdDestSpeed : () ==> ()
				TestCitizenFactoryCreatePedestrianIdDestSpeed() == (
					dcl id : Identification`ID_t := "A";
					dcl destination : Intersection := CityConstructionFactory`createIntersection();
					dcl speed : Speed`speed_t := 7;
					dcl pedestrian : Pedestrian := CitizenFactory`createPedestrian(id, destination, speed);
					
					assertTrue(pedestrian.getID() = id);
					assertTrue(pedestrian.getDestination() = destination);
					assertTrue(pedestrian.getSpeed() = speed);
				);
			
			
end CitizenTests





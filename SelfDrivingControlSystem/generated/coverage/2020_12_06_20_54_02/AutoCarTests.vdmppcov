

class AutoCarTests is subclass of TestCase, Autonomous
	
	operations
		public AutoCarTests : seq of char ==> AutoCarTests
			AutoCarTests(name) == ( setName(name); );


		protected RunTest : () ==> ()
			RunTest() == (
				TestAutoCarTier();
				TestAutoCarIdTier();
				TestAutoCarGetTier();
				
				TestAutoCarPickUpPassengerSmall();
				TestAutoCarPickUpPassengerMedium();
				TestAutoCarPickUpPassengerLarge();
				TestAutoCarDropOffPassengerSmall();
				TestAutoCarDropOffPassengerMedium();
				
				TestAutonomousPassengerInSet();
				TestAutonomousPassengerNotInSet();
				
				TestAutonomousInvPassengersWaitTimeSmall();
				TestAutonomousInvPassengersWaitTimeMedium();
				
				TestAutonomousInvPassengersAlsoInHistory();
			);


		-------------- Autonomous --------------
		
		protected TestAutoCarTier : () ==> ()
			TestAutoCarTier() == (
				dcl tierSmall : CarTier`tiers := <small>;
				dcl tierMedium : CarTier`tiers := <medium>;
				dcl tierLarge : CarTier`tiers := <large>;
				dcl autoCarSmall : Autonomous := new Autonomous(tierSmall);
				dcl autoCarMedium : Autonomous := new Autonomous(tierMedium);
				dcl autoCarLarge : Autonomous := new Autonomous(tierLarge);
				
				assertTrue(isofclass(Autonomous, autoCarSmall));
				assertTrue(isofclass(Car, autoCarSmall));		
				assertTrue(isofbaseclass(ActorObject, autoCarSmall));			
				
				assertTrue(autoCarSmall.getTier() = tierSmall);
				assertTrue(autoCarMedium.getTier() = tierMedium);
				assertTrue(autoCarLarge.getTier() = tierLarge);
			);
			
			
		protected TestAutoCarIdTier : () ==> ()
			TestAutoCarIdTier() == (
				dcl idSmall : Identification`ID_t := "A";
				dcl idMedium : Identification`ID_t := "B";
				dcl idLarge : Identification`ID_t := "C";
				dcl autoCarSmall : Autonomous := new Autonomous(idSmall, <small>);
				dcl autoCarMedium : Autonomous := new Autonomous(idMedium, <medium>);
				dcl autoCarLarge : Autonomous := new Autonomous(idLarge, <large>);	
				
				assertTrue(autoCarSmall.getID() = idSmall);
				assertTrue(autoCarMedium.getID() = idMedium);
				assertTrue(autoCarLarge.getID() = idLarge);
			);
			
		
		protected TestAutoCarGetTier : () ==> ()
			TestAutoCarGetTier() == (
				dcl autoCarSmall : Autonomous := new Autonomous(<small>);
				assertTrue(autoCarSmall.getTier() = <small>);
			);
		
		
		protected TestAutoCarPickUpPassengerSmall : () ==> ()
			TestAutoCarPickUpPassengerSmall() == (
				dcl car : Autonomous := CarFactory`createSmallAutoCar();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				car.pickUpPassenger(passengerA);
				
				assertTrue(car.getNrOfPassengers() = 1);
			);
			
			
		protected TestAutoCarPickUpPassengerMedium : () ==> ()
			TestAutoCarPickUpPassengerMedium() == (
				dcl car : Autonomous := CarFactory`createMediumAutoCar();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerD : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				car.pickUpPassenger(passengerA);
				assertTrue(car.getNrOfPassengers() = 1);
				
				car.pickUpPassenger(passengerB);
				assertTrue(car.getNrOfPassengers() = 2);
				
				car.pickUpPassenger(passengerC);
				assertTrue(car.getNrOfPassengers() = 3);
				
				car.pickUpPassenger(passengerD);
				assertTrue(car.getNrOfPassengers() = 4);
			);
			
		protected TestAutoCarPickUpPassengerLarge : () ==> ()
			TestAutoCarPickUpPassengerLarge() == (
				dcl car : Autonomous := CarFactory`createLargeAutoCar();				
				
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));
				car.pickUpPassenger(CitizenFactory`createPassenger(new Intersection()));

				assertTrue(car.getNrOfPassengers() = 8);
			);
		
		
		protected TestAutoCarDropOffPassengerSmall : () ==> ()
			TestAutoCarDropOffPassengerSmall() == (
				dcl car : Autonomous := CarFactory`createSmallAutoCar();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				car.pickUpPassenger(passengerA);
				assertTrue(car.getNrOfPassengers() = 1);
				
				car.dropOffPassenger(passengerA);
				assertTrue(car.getNrOfPassengers() = 0);
			);
			
		
		protected TestAutoCarDropOffPassengerMedium : () ==> ()
			TestAutoCarDropOffPassengerMedium() == (
				dcl car : Autonomous := CarFactory`createMediumAutoCar();
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerD : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerE : Passenger := CitizenFactory`createPassenger(new Intersection());
				
				car.pickUpPassenger(passengerA);
				assertTrue(car.getNrOfPassengers() = 1);
				
				car.pickUpPassenger(passengerB);
				assertTrue(car.getNrOfPassengers() = 2);
				
				car.dropOffPassenger(passengerB);
				assertTrue(car.getNrOfPassengers() = 1);
				
				car.pickUpPassenger(passengerC);
				assertTrue(car.getNrOfPassengers() = 2);
				
				car.pickUpPassenger(passengerD);
				assertTrue(car.getNrOfPassengers() = 3);
				
				car.pickUpPassenger(passengerE);
				assertTrue(car.getNrOfPassengers() = 4);
			);
		
		
		protected TestAutonomousPassengerInSet : () ==> ()
			TestAutonomousPassengerInSet() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerSet : Autonomous`passengers_t := { passengerA, passengerB };
				
				assertTrue(passengerInSet(passengerA, passengerSet));
				assertTrue(passengerInSet(passengerB, passengerSet));
			);
			
			
		protected TestAutonomousPassengerNotInSet : () ==> ()
			TestAutonomousPassengerNotInSet() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerSet : Autonomous`passengers_t := { passengerA };
				
				assertTrue(passengerInSet(passengerA, passengerSet));
				assertFalse(passengerInSet(passengerB, passengerSet));
			);
			
		
		protected TestAutonomousInvPassengersWaitTimeSmall : () ==> ()
			TestAutonomousInvPassengersWaitTimeSmall() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl history : TravelHistory := new TravelHistory();
				
				dcl passengerSetA : Autonomous`passengers_t := { passengerA };
				dcl passengerSetB : Autonomous`passengers_t := { passengerB };
				
				dcl tier : CarTier := new CarTier(<small>);
				
				history.pickUp(passengerA);
				assertTrue(Autonomous`InvPassengersWaitTime(passengerSetA, history, tier));
				history.dropOff(passengerA);
				assertTrue(Autonomous`InvPassengersWaitTime(passengerSetA, history, tier));
				
				history.pickUp(passengerB);
				assertTrue(Autonomous`InvPassengersWaitTime(passengerSetB, history, tier));
				history.dropOff(passengerB);
				assertTrue(Autonomous`InvPassengersWaitTime(passengerSetB, history, tier));
			);
			
		
		protected TestAutonomousInvPassengersWaitTimeMedium : () ==> ()
			TestAutonomousInvPassengersWaitTimeMedium() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerD : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl history : TravelHistory := new TravelHistory();
				
				dcl tier : CarTier := new CarTier(<medium>);
				
				history.pickUp(passengerA);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA }, history, tier));
				history.pickUp(passengerB);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA, passengerB }, history, tier));
				history.pickUp(passengerC);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA, passengerB, passengerC }, history, tier));
				history.pickUp(passengerD);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA, passengerB, passengerC, passengerD }, history, tier));
				
				history.dropOff(passengerD);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA, passengerB, passengerC, passengerD }, history, tier));
				history.dropOff(passengerC);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA, passengerB, passengerC }, history, tier));
				history.dropOff(passengerB);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA, passengerB }, history, tier));
				history.dropOff(passengerA);
				assertTrue(Autonomous`InvPassengersWaitTime({ passengerA }, history, tier));
			);
			
			
		protected TestAutonomousInvPassengersAlsoInHistory : () ==> ()
			TestAutonomousInvPassengersAlsoInHistory() == (
				dcl passengerA : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerB : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl passengerC : Passenger := CitizenFactory`createPassenger(new Intersection());
				dcl history : TravelHistory := new TravelHistory();
				
				assertTrue(not Autonomous`InvPassengersAlsoInHistory({ passengerA }, history));
				
				history.pickUp(passengerA);
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerA }, history));
				assertTrue(not Autonomous`InvPassengersAlsoInHistory({ passengerB }, history));
				assertTrue(not Autonomous`InvPassengersAlsoInHistory({ passengerC }, history));
				assertTrue(not Autonomous`InvPassengersAlsoInHistory({ passengerA, passengerB, passengerC }, history));
				
				history.pickUp(passengerB);
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerA }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerB }, history));
				assertTrue(not Autonomous`InvPassengersAlsoInHistory({ passengerC }, history));
				assertTrue(not Autonomous`InvPassengersAlsoInHistory({ passengerA, passengerB, passengerC }, history));
				
				history.pickUp(passengerC);
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerA }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerB }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerC }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerA, passengerB, passengerC }, history));
				
				history.dropOff(passengerA);
				history.dropOff(passengerB);
				history.dropOff(passengerC);
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerA }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerB }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerC }, history));
				assertTrue(Autonomous`InvPassengersAlsoInHistory({ passengerA, passengerB, passengerC }, history));
			);
		

end AutoCarTests







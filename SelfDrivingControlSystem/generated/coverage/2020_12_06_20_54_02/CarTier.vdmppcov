class CarTier

	types
		public tiers = <small> | <medium> | <large>;
		public seat_t = nat;
		public price_t = nat;
	
	
	values
		public tierToSeatMap : map tiers to seat_t = { <small> |-> 1, <medium> |-> 4, <large> |-> 8 };
		public tierToPriceMap : map tiers to price_t = { <small> |-> 100, <medium> |-> 25, <large> |-> 10 };
		public tierToLengthMap : map tiers to Length`length_t = { <small> |-> 3, <medium> |-> 5, <large> |-> 7 };
	
	instance variables
		private seats_: seat_t;
		private price_: price_t;
		private tier_: tiers;
		private length_ : Length`length_t;
		
		inv InvSeatValue(seats_) and 
				InvPriceValue(price_) and 
				InvLengthValue(price_) and 
				InvValidMapKeys(tierToSeatMap) and 
				InvValidMapKeys(tierToPriceMap);
		
	functions
		protected InvSeatValue : seat_t -> bool
			InvSeatValue(nr_seat) == nr_seat > 0;
			
		protected InvPriceValue : price_t -> bool
			InvPriceValue(price) == price > 0;
			
		protected InvLengthValue : Length`length_t -> bool
			InvLengthValue(length) == length > 1;
			
		protected InvValidMapKeys : map tiers to ? -> bool
			InvValidMapKeys(tierMap) == forall key in set dom tierMap & is_(key, tiers);
		
		
	operations
		public CarTier : () ==> CarTier
			CarTier() == constructor(<medium>);
			
			
		public CarTier : tiers ==> CarTier
			CarTier(tier) == ( 
				constructor(tier);
			 )
			 post tier_ = tier and is_(tier, tiers);
			 
		
		protected constructor : tiers ==> ()
			constructor(tier) == ( 
				tier_ := tier;
				seats_ := tierToSeats(tier);
			  price_ := tierToPrice(tier);
			  length_ := tierToLength(tier);
			);
			
			  
		protected tierToSeats : tiers ==> seat_t
			tierToSeats(tier) == (
				return tierToSeatMap(tier);
			)
			pre tier in set dom tierToSeatMap;
			
		protected tierToPrice : tiers ==> price_t
			tierToPrice(tier) == (
				return tierToPriceMap(tier);
			)
			pre tier in set dom tierToPriceMap;
			
		protected tierToLength : tiers ==> Length`length_t
			tierToLength(tier) == (
				return tierToLengthMap(tier);
			)
			pre tier in set dom tierToLengthMap;
			
			
		pure public getTier : () ==> tiers
			getTier() == return tier_;
			
		pure public getSeats : () ==> seat_t
			getSeats() == return seats_;
			
		pure public getPrice : () ==> price_t
			getPrice() == return price_;
			
		pure public getLength : () ==> Length`length_t
			getLength() == return length_;
		
			
end CarTier	/* Would another name be better for this class. I have a hard time wrap this into a good design... */

							
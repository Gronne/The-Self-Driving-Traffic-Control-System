
class SelfDrivingControlSystem is subclass of ActorObject
		types
		public passengerR :: passenger : Passenger
												 carId		 : Identification`ID_t;
		
		
		
		instance variables
			city_ : City;
			autoCars : set of Autonomous := {};
			pendingPassengers : set of passengerR := {};		-- Passengers which is ready to be picked up but has not been so yet
			
		
		functions
			protected passengersAlreadyAssignedToCar : set of passengerR * Identification`ID_t -> nat
				passengersAlreadyAssignedToCar(passengerRs, carID) == card { passenger | passenger in set passengerRs & passenger.carId = carID};
				
			protected roomForMorePassengers : Autonomous * set of passengerR * Passenger -> bool
				roomForMorePassengers(car, passengerRs, newPassenger) == car.getTier() = newPassenger.getTier() and CarTier`tierToSeatMap(car.getTier()) > (car.getNrOfPassengers() + passengersAlreadyAssignedToCar(passengerRs, car.getID()));
				
				
				
		
		
			
		operations		
			private SelfDrivingControlSystem : () ==> SelfDrivingControlSystem	
				SelfDrivingControlSystem() == return self;												
				
			public SelfDrivingControlSystem : City ==> SelfDrivingControlSystem
				SelfDrivingControlSystem(city) == (
					city_ := city;
				);
				
			protected changeInCityMap : () ==> ()				-- No new passengers
				changeInCityMap() == (
					dcl cityMap : CityMap := city_.getCityMap();
					
					let car in set autoCars in (
						dcl pickUpLocations : set of Location`loc_t := { passenger.getLocation() | passenger in set getPendingPassengers(car.getID()) };
						dcl dropOffLocations : set of Location`loc_t := { passenger.getDestination() | passenger in set getPendingPassengers(car.getID()) } union { passenger.getDestination() | passenger in set car.getPassengers() };
						dcl newRoute : Route := RoutePlanner`planRoute(car.getLocation(), pickUpLocations, dropOffLocations);	
						car.updateRoute(newRoute);
					);
				);
				
			
			protected newPassenger : () ==> ()					-- No change in city structure
				newPassenger() == (
					dcl passenger : Passenger := city_.getNewPassenger();
					dcl carId : Identification`ID_t := assignCar(passenger);
					dcl newPassengerR : passengerR := mk_passengerR(passenger, carId);
					
					dcl car : Autonomous := { car.getID() |-> car | car in set autoCars }(carId);
					dcl pickUpLocations : set of Location`loc_t := { passenger.getLocation() | passenger in set getPendingPassengers(carId) };
					dcl dropOffLocations : set of Location`loc_t := { passenger.getDestination() | passenger in set getPendingPassengers(carId) } union { passenger.getDestination() | passenger in set car.getPassengers() };
					dcl newRoute : Route := RoutePlanner`planRoute(car.getLocation(), pickUpLocations, dropOffLocations);	
					car.updateRoute(newRoute);
					
					pendingPassengers := pendingPassengers union {newPassengerR};
				);
				
				
			private assignCar : Passenger ==> Identification`ID_t
				assignCar(passenger) == (
					dcl id : Identification`ID_t := "Undefined";
					while id = "Undefined" do(
						let car in set autoCars in 
							if roomForMorePassengers(car, pendingPassengers, passenger) then id := car.getID();
						if id = "Undefined" then 
							addNewCar(passenger.getTier());	
					);
					return id;
				);
				
			
			private addNewCar : CarTier`tiers ==> ()
				addNewCar(tier) == (
					autoCars := autoCars union { CarFactory`createAutoCar(tier) };
				);
			
			
			public getPendingPassengers : Route * Identification`ID_t ==> set of Passenger
				getPendingPassengers(route, carID) == return {passenger.passenger | passenger in set pendingPassengers & route.inRoute(passenger.passenger.getDestination()) and passenger.carId = carID};
				
			public getPendingPassengers : () ==> set of Passenger
				getPendingPassengers() == return {passenger.passenger | passenger in set pendingPassengers };
				
			public getPendingPassengers : Identification`ID_t ==> set of Passenger
				getPendingPassengers(carId) == return {passenger.passenger | passenger in set pendingPassengers & passenger.carId = carId };
				
				
			public retrievePassenger : Passenger * Identification`ID_t ==> ()
				retrievePassenger(passenger, carId) == pendingPassengers := pendingPassengers \ {mk_passengerR(passenger, carId)}
			pre mk_passengerR(passenger, carId) in set pendingPassengers
			post mk_passengerR(passenger, carId) not in set pendingPassengers;
				
			
			
			
		----------------------- Step() -----------------------
			
		
		private Step : nat ==> ()
			Step(time) == (
				let actor in set autoCars in actor.step(self, time);
				let actor in set pendingPassengers in actor.passenger.step(time);
			);

		
		
end SelfDrivingControlSystem








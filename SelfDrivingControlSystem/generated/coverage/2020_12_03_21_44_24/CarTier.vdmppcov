class CarTier

types
	public seat_t = nat;
	public price_t = nat;

instance variables
	protected seats_: seat_t;
	protected price_: price_t;
	
	inv seats_ > 0 and price_ > 0;
	
	
operations
	public CarTier : seat_t * price_t ==> CarTier
		CarTier(nr_of_seats, price_for_ride) == ( 
			seats_ := nr_of_seats;
		  price_ := price_for_ride )
		pre nr_of_seats > 0 and price_for_ride > 0
		post seats_ = nr_of_seats and price_ = price_for_ride;
		
	protected Constructor : seat_t * price_t ==> ()
			Constructor(nr_of_seats, price_for_ride) == ( 
			seats_ := nr_of_seats;
		  price_ := price_for_ride );

end CarTier	/* Would another name be better for this class. I have a hard time wrap this into a good design... */

							
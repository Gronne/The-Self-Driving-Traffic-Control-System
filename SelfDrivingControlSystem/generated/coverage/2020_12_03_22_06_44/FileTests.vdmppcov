

class FileTests is subclass of TestCase, CSVCityMapFile, CityMapFileFactory
	
	operations
		public FileTests : seq of char ==> FileTests
			FileTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
				TestCSVCityMapFileINVelementIndexInSeq();
				TestCityMapFileINVvalidRows();
				TestCityMapFileINVinvalidRowsDirection();
				TestCityMapFileINVinvalidRowsSpeedLimit();
				
				TestCityMapFileRowObject();
				TestCityMapFileSaveCsvRows();
				TestCityMapFileLoadCsvRows();
				
				TestCityMapFileCsvRows2CityMapEmpty();
				TestCityMapFileCsvRows2CityMap();
				TestCityMapFileCityMap2CsvRowsEmpty();
				TestCityMapFileCityMap2CsvRows();
				
				TestCityMapFileSaveLoad();
				TestCityMapFileSaveLoadNoAddress();		
				
				TestCityMapFileFactoryAppendTypeDoNotHave();
				TestCityMapFileFactoryAppendTypeDoHave();		
				TestCityMapFileFactorySaveLoad();
				TestCityMapFileFactorySaveLoadNoAddress();
				TestCityMapFileFactorySaveLoadNoType();
			);
			
			
		-------------- CSVCityMapFile ----------------
		protected TestCSVCityMapFileINVelementIndexInSeq : () ==> ()
			TestCSVCityMapFileINVelementIndexInSeq() == (
				dcl natElem : nat := 4;
				dcl seqNat : seq of nat := [1, 2, 3, natElem, 5];
				
				dcl stringElem : seq of char := "dig";
				dcl seqString : seq of seq of char := ["Hej", "med", stringElem, "nisse", "lille"];
				
				dcl roadElem : Road := new Road();
				dcl seqRoad : seq of Road := [new Road(), new Road(), new Road(), new Road(), roadElem];
				
				dcl roadTuple : (Intersection * Intersection) := mk_(new Intersection(), new Intersection());
				dcl seqIntersectionTuple : seq of (Intersection * Intersection) := [ mk_(new Intersection(), new Intersection()), 
																																						 roadTuple, 
																																						 mk_(new Intersection(), new Intersection())];
				
				assertTrue(CSVCityMapFile`getElementIndexInSeq(seqNat, natElem) = 4);			
				assertFalse(CSVCityMapFile`getElementIndexInSeq(seqNat, natElem) = 2);	
				assertTrue(CSVCityMapFile`getElementIndexInSeq(seqString, stringElem) = 3);	
				assertFalse(CSVCityMapFile`getElementIndexInSeq(seqString, stringElem) = 2);	
				assertTrue(CSVCityMapFile`getElementIndexInSeq(seqRoad, roadElem) = 5);	
				assertFalse(CSVCityMapFile`getElementIndexInSeq(seqRoad, roadElem) = 2);	
				assertTrue(CSVCityMapFile`getElementIndexInSeq(seqIntersectionTuple, roadTuple) = 2);				
				assertFalse(CSVCityMapFile`getElementIndexInSeq(seqIntersectionTuple, roadTuple) = 3);	
			);
			
			
		protected TestCityMapFileINVvalidRows : () ==> ()
			TestCityMapFileINVvalidRows() == (
				dcl rows : seq of row_object := [ mk_row_object("A", "B", "bi", 50, 1000),
																					mk_row_object("C", "D", "mono", 1, 2),
																					mk_row_object("A", "D", "bi", 50, 1000) ];
																					
				assertTrue(validRows(rows));
			);
			
			
		protected TestCityMapFileINVinvalidRowsDirection : () ==> ()
			TestCityMapFileINVinvalidRowsDirection() == (
				dcl rows : seq of row_object := [ mk_row_object("A", "B", "bi", 50, 1000),
																					mk_row_object("C", "D", "mono", 1, 2),
																					mk_row_object("A", "D", "mo", 50, 1000) ];
																					
				assertFalse(validRows(rows));
			);
			
			
		protected TestCityMapFileINVinvalidRowsSpeedLimit : () ==> ()
			TestCityMapFileINVinvalidRowsSpeedLimit() == (
				dcl rows : seq of row_object := [ mk_row_object("A", "B", "bi", 50, 1000),
																					mk_row_object("C", "D", "mono", 1, 2),
																					mk_row_object("A", "D", "bi", 0, 1000) ];
																					
				assertFalse(validRows(rows));
			);
			
		
		protected TestCityMapFileRowObject : () ==> ()
			TestCityMapFileRowObject() == (
				dcl rowO : row_object := mk_row_object("A", "B", "bi", 50, 1000);
				
				assertTrue(rowO.From = "A");
				assertTrue(rowO.To = "B");
				assertTrue(rowO.Direction = "bi");
				assertTrue(rowO.SpeedLimit = 50);
				assertTrue(rowO.Length = 1000);
			);
			
		
		protected TestCityMapFileSaveCsvRows : () ==> ()
			TestCityMapFileSaveCsvRows() == (
				dcl rows : seq of row_object := [ mk_row_object("A", "B", "bi", 1, 2), 
																					mk_row_object("A", "C", "mono", 3, 4), 
																					mk_row_object("C", "B", "bi", 5, 6)];
				
				dcl fileName : seq of char := "TestSaveCsv.csv";
				dcl loadedRows : seq of row_object := [];
				
				saveCsvRows("", fileName, rows);
				
				loadedRows := loadCsvRows("", fileName);
				assertTrue(loadedRows = rows);
			);
			
			
		protected TestCityMapFileLoadCsvRows : () ==> ()
			TestCityMapFileLoadCsvRows() == (
				dcl rows : seq of row_object := [ mk_row_object("A", "B", "bi", 1, 2), 
																					mk_row_object("A", "C", "mono", 3, 4), 
																					mk_row_object("C", "B", "bi", 5, 6)];
				
				dcl fileName : seq of char := "TestSaveCsv.csv";
				dcl loadedRows : seq of row_object := [];
				
				saveCsvRows("", fileName, rows);
				
				loadedRows := loadCsvRows("", fileName);
				assertTrue(loadedRows = rows);
			);
			
			
		protected TestCityMapFileCsvRows2CityMapEmpty : () ==> ()
			TestCityMapFileCsvRows2CityMapEmpty() == (
				dcl rows : seq of row_object := [ ];
				dcl cityMap : CityMap := csvRows2CityMap(rows);
				
				assertTrue(cityMap.getSetOfInter() = {});
				assertTrue(cityMap.getSetOfRoad() = {});
			);
			
		
		protected TestCityMapFileCsvRows2CityMap : () ==> ()
			TestCityMapFileCsvRows2CityMap() == (
				dcl rows : seq of row_object := [ mk_row_object("A", "B", "bi", 1, 2), 
																					mk_row_object("A", "C", "mono", 3, 4), 
																					mk_row_object("C", "B", "bi", 5, 6)];
																					
				dcl cityMapA : CityMap := csvRows2CityMap(rows);
				
				assertTrue(card cityMapA.getSetOfInter() = 3);
				assertTrue(card cityMapA.getSetOfRoad() = 3);
			);
			
			
		protected TestCityMapFileCityMap2CsvRowsEmpty : () ==> ()
			TestCityMapFileCityMap2CsvRowsEmpty() == (
				dcl cityMap : CityMap := new CityMap();
				dcl rows : seq of row_object := cityMap2CsvRows(cityMap);
				dcl rowsExpected : seq of row_object := [ ];
				
				assertTrue(rows = rowsExpected);
			);
			
		
		protected TestCityMapFileCityMap2CsvRows : () ==> ()
			TestCityMapFileCityMap2CsvRows() == (
				dcl cityMap : CityMap := new CityMap();
				dcl rows : seq of row_object;
				dcl rowsExpected : seq of row_object;
				
				dcl roadA : Road := new Road(10, 20);
				dcl roadB : Road := new Road(30, 40);
				dcl roadC : Road := new Road(50, 60);
				dcl interA : Intersection := new Intersection("A");
				dcl interB : Intersection := new Intersection("B");
				dcl interC : Intersection := new Intersection("C");
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				cityMap.addRoad(roadA, interB, interA);
				
				rows := cityMap2CsvRows(cityMap);
				rowsExpected := [ mk_row_object("B", "A", "bi", 20, 10), 
													mk_row_object("B", "C", "mono", 40, 30),
													mk_row_object("C", "A", "mono", 60, 50)];
													
				assertTrue(elems rows = elems rowsExpected);
			);
			
			
			protected TestCityMapFileSaveLoad : () ==> ()
			TestCityMapFileSaveLoad() == (
				dcl cityMap : CityMap := new CityMap();
				dcl cityMapB : CityMap;
				
				dcl roadA : Road := new Road(10, 20);
				dcl roadB : Road := new Road(30, 40);
				dcl roadC : Road := new Road(50, 60);
				dcl interA : Intersection := new Intersection("A");
				dcl interB : Intersection := new Intersection("B");
				dcl interC : Intersection := new Intersection("C");
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				cityMap.addRoad(roadA, interB, interA);
				
				save("", "TestSaveCsv.csv", cityMap);
				cityMapB := load("", "TestSaveCsv.csv")
			);
			
			
		protected TestCityMapFileSaveLoadNoAddress : () ==> ()
			TestCityMapFileSaveLoadNoAddress() == (
				dcl cityMap : CityMap := new CityMap();
				dcl cityMapB : CityMap;
				
				dcl roadA : Road := new Road(10, 20);
				dcl roadB : Road := new Road(30, 40);
				dcl roadC : Road := new Road(50, 60);
				dcl interA : Intersection := new Intersection("A");
				dcl interB : Intersection := new Intersection("B");
				dcl interC : Intersection := new Intersection("C");
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				cityMap.addRoad(roadA, interB, interA);
				
				save("TestSaveCsv.csv", cityMap);
				cityMapB := load("TestSaveCsv.csv")
			);
		
		
		
		------------- CityMapFileFactory -------------
		
		protected TestCityMapFileFactoryAppendTypeDoNotHave : () ==> ()
			TestCityMapFileFactoryAppendTypeDoNotHave() == (
				dcl name : IFile`string_t := "name";
				dcl type : IFile`string_t := ".csv";
				dcl expectedResult : IFile`string_t := "name.csv";
				dcl result : IFile`string_t := appendType(name, type);
				
				assertTrue(result = expectedResult);
			);
			
		protected TestCityMapFileFactoryAppendTypeDoHave : () ==> ()
			TestCityMapFileFactoryAppendTypeDoHave() == (
				dcl name : IFile`string_t := "name.csv";
				dcl type : IFile`string_t := ".csv";
				dcl expectedResult : IFile`string_t := "name.csv";
				dcl result : IFile`string_t := appendType(name, type);
				
				assertTrue(result = expectedResult);
			);
			
			
		protected TestCityMapFileFactoryAppendTypeShortName : () ==> ()
			TestCityMapFileFactoryAppendTypeShortName() == (
				dcl name : IFile`string_t := "f";
				dcl type : IFile`string_t := ".csv";
				dcl expectedResult : IFile`string_t := "f.csv";
				dcl result : IFile`string_t := appendType(name, type);
				
				assertTrue(result = expectedResult);
			);
		
		
		protected TestCityMapFileFactorySaveLoad : () ==> ()
			TestCityMapFileFactorySaveLoad() == (
				dcl cityMap : CityMap := new CityMap();
				dcl cityMapB : CityMap;
				
				dcl roadA : Road := new Road(10, 20);
				dcl roadB : Road := new Road(30, 40);
				dcl roadC : Road := new Road(50, 60);
				dcl interA : Intersection := new Intersection("A");
				dcl interB : Intersection := new Intersection("B");
				dcl interC : Intersection := new Intersection("C");
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				cityMap.addRoad(roadA, interB, interA);
				
				CityMapFileFactory`saveCity("", "TestSaveCsv.csv", cityMap);
				cityMapB := CityMapFileFactory`loadCity("", "TestSaveCsv.csv");
				
				assertTrue(forall interE in set cityMap.getSetOfInter() & exists interNew in set cityMapB.getSetOfInter() & interE.getID() = interNew.getID());
				assertTrue(forall road in set cityMap.getSetOfRoad() & exists roadNew in set cityMapB.getSetOfRoad() & road.getLength() = roadNew.getLength() and road.getSpeedLimit() = roadNew.getSpeedLimit());
			);
			
			
		protected TestCityMapFileFactorySaveLoadNoAddress : () ==> ()
			TestCityMapFileFactorySaveLoadNoAddress() == (
				dcl cityMap : CityMap := new CityMap();
				dcl cityMapB : CityMap;
				
				dcl roadA : Road := new Road(10, 20);
				dcl roadB : Road := new Road(30, 40);
				dcl roadC : Road := new Road(50, 60);
				dcl interA : Intersection := new Intersection("A");
				dcl interB : Intersection := new Intersection("B");
				dcl interC : Intersection := new Intersection("C");
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				cityMap.addRoad(roadA, interB, interA);
				
				CityMapFileFactory`saveCity("TestSaveCsv.csv", cityMap);
				cityMapB := CityMapFileFactory`loadCity("TestSaveCsv.csv");
				
				assertTrue(forall interE in set cityMap.getSetOfInter() & exists interNew in set cityMapB.getSetOfInter() & interE.getID() = interNew.getID());
				assertTrue(forall road in set cityMap.getSetOfRoad() & exists roadNew in set cityMapB.getSetOfRoad() & road.getLength() = roadNew.getLength() and road.getSpeedLimit() = roadNew.getSpeedLimit());
			);
			
		
		protected TestCityMapFileFactorySaveLoadNoType : () ==> ()
			TestCityMapFileFactorySaveLoadNoType() == (
				dcl cityMap : CityMap := new CityMap();
				dcl cityMapB : CityMap;
				
				dcl roadA : Road := new Road(10, 20);
				dcl roadB : Road := new Road(30, 40);
				dcl roadC : Road := new Road(50, 60);
				dcl interA : Intersection := new Intersection("A");
				dcl interB : Intersection := new Intersection("B");
				dcl interC : Intersection := new Intersection("C");
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				cityMap.addRoad(roadA, interA, interB);
				cityMap.addRoad(roadB, interB, interC);
				cityMap.addRoad(roadC, interC, interA);
				cityMap.addRoad(roadA, interB, interA);
				
				CityMapFileFactory`saveCity("TestSaveCsv", cityMap);
				cityMapB := CityMapFileFactory`loadCity("TestSaveCsv");
				
				assertTrue(forall interE in set cityMap.getSetOfInter() & exists interNew in set cityMapB.getSetOfInter() & interE.getID() = interNew.getID());
				assertTrue(forall road in set cityMap.getSetOfRoad() & exists roadNew in set cityMapB.getSetOfRoad() & road.getLength() = roadNew.getLength() and road.getSpeedLimit() = roadNew.getSpeedLimit());
			);
		
			
			
			
end FileTests
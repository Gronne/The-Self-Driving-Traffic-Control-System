

class City

	instance variables
		cityMap_ : CityMap := new CityMap();
		passengers_ : set of Passenger := {};
		pedestrians_ : set of Pedestrian := {};
		manualCars_ : set of Manual := {};
		blockedConstructions : seq of CityMap`construction_types := [];
		
		newPassengers_ : seq of Passenger := [];
		
	inv noMatch(newPassengers_);
	
	
	functions
		protected noMatch : seq of ? -> bool
			noMatch(sequence) == len sequence = card elems sequence;
			
			
		protected set2Seq : set of ? -> seq of ?
			set2Seq(setOfX) == if setOfX = {} then []
												 else let x in set setOfX in [x] ^set2Seq(setOfX\{x})
		measure card setOfX;
		
		/*
		protected getRandomIntersectionFromCity : CityMap -> Intersection
			getRandomIntersectionFromCity(cityMap) == let sequence = set2Seq(cityMap.getSetOfInter()) in sequence(MATH`rand((len sequence)-1)+1);
			
		protected getRandomRoadFromCity : CityMap -> Road
			getRandomRoadFromCity(cityMap) == let sequence = set2Seq(cityMap.getSetOfRoad()) in sequence(MATH`rand((len sequence)-1)+1);
		*/
		
		
	operations
		public City : CityMap ==> City
			City(cityMap) == (
				cityMap_ := cityMap;
			);
			
		
		public getCityMap : () ==> CityMap
			getCityMap() == return cityMap_;
			
		
		public getNewPassenger : () ==> Passenger
			getNewPassenger() == (
				dcl newPassenger : Passenger := hd newPassengers_;
				newPassengers_ := tl newPassengers_;
				return newPassenger;
			)
		pre len newPassengers_ > 0
		post forall passenger in seq newPassengers_ & passenger <> RESULT; 
		
		-------------- Internal Operations --------------	
		/*
		protected createPedestrian : () ==> ()
			createPedestrian() == (
				pedestrians_ := pedestrians_ union CitizenFactory`createPedestrian();
			);
			
			
		protected createPassenger : () ==> ()
			createPassenger() == (
				passengers_ := passengers_ union CitizenFactory`createPassenger();
			);
			
			
		protected createManualCar : () ==> ()
			createManualCar() == (
				manualCars_ := manualCars_ union CarFActory`createManualCar();
			);
			
			
		protected blockRandomIntersection : () ==> ()
			blockRandomIntersection() == (
				dcl randomIntersection : Intersection := getRandomIntersectionFromCity(cityMap_);
				cityMap_.block(randomIntersection);
			);
			
		
		protected blockIntersection : Intersection ==> ()
			blockIntersection(intersection) == (
				cityMap_.block(intersection);
			)
		pre intersection in set cityMap_.getSetOfInter();
			
		
		protected blockRandomRoad : () ==> ()
			blockRandomRoad() == (
				dcl randomRoad : Road := getRandomRoadFromCity(cityMap_);
				cityMap_.block(randomRoad);
			);
			
		
		protected blockRoad : Road ==> ()
			blockRoad(road) == (
				cityMap_.block(road);
			)
		pre road in set cityMap_.getSetOfRoad();
			*/
		/*	
		protected notifySystemAboutCrash : () ==> ()
			notifySystemAboutCrash() == (
				
			);
			
		
		protected notifySystemAboutNewPassenger : () ==> ()
			notifySystemAboutNewPassenger() == (
			
			);
			
		
		protected createRoute : Manual ==> ()
			createRoute(manualCar) == (
			
			);
			
			
		protected createRoute : Pedestrian ==> ()
			createRoute(manualCar) == (
			
			);
			
*/

end City
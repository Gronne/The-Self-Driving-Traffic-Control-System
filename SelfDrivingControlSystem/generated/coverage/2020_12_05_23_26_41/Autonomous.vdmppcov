
class Autonomous is subclass of Car

	types
		public passengers_t = set of Passenger;
		
	instance variables
		passengers_: passengers_t := {};
		travelHistory_: TravelHistory;
		carTier_ : CarTier := new CarTier();
		
	inv card passengers_ <= carTier_.getSeats() and 
			InvPassengersWaitTime(passengers_, travelHistory_, carTier_) and
			InvPassengersAlsoInHistory(passengers_, travelHistory_);
		
		
	functions
		private AutoCon : passengers_t -> bool
			AutoCon(pas_set) == card pas_set = card {};
			
		protected passengerInSet : Passenger * passengers_t -> bool
			passengerInSet(passenger, passengerSet) == passenger.getID() in set {p.getID() | p in set passengerSet};
			
		protected InvPassengersWaitTime : passengers_t * TravelHistory * CarTier -> bool
			InvPassengersWaitTime(passengerSet, travelHistory, tier) == forall passenger in set passengerSet & travelHistory.nrEventsAfterPickUp(passenger) <= tier.getSeats() * 2;
			
		protected InvPassengersAlsoInHistory : passengers_t * TravelHistory -> bool
			InvPassengersAlsoInHistory(passengerSet, travelHistory) == forall passenger in set passengerSet & travelHistory.checkPassengerInSeq(passenger);
			
		
	
	operations
		public Autonomous : () ==> Autonomous
			Autonomous() == (
				carTier_ := new CarTier(<medium>);
				travelHistory_ := new TravelHistory();
				Car`constructor(carTier_.getLength()); 
			);
			
		public Autonomous: CarTier`tiers ==> Autonomous
			Autonomous(tier) == (
				carTier_ := new CarTier(tier);
				travelHistory_ := new TravelHistory();
				Car`constructor(carTier_.getLength()); 
			)
		post AutoCon(passengers_); 
		
		
		public Autonomous: Identification`ID_t * CarTier`tiers ==> Autonomous
			Autonomous(id, tier) == (
				carTier_ := new CarTier(tier);
				travelHistory_ := new TravelHistory();
				Car`constructor(id, carTier_.getLength()); 
			)
		post AutoCon(passengers_); 
		
		
		protected  pickUpPassenger : Passenger ==> ()
			pickUpPassenger(passenger) == (
				travelHistory_.pickUp(passenger);
				passengers_ := passengers_ union {passenger};
			)
		pre not passengerInSet(passenger, passengers_)
		post card passengers_ > 0 and passengerInSet(passenger, passengers_);
		
		
		protected dropOffPassenger : Passenger ==> ()
			dropOffPassenger(passenger) == (
				travelHistory_.dropOff(passenger);
				passengers_ := passengers_ \ {passenger};
			)
		pre passengerInSet(passenger, passengers_)
		post card passengers_ >= 0 and not passengerInSet(passenger, passengers_);
		
		
		pure public getTier : () ==> CarTier`tiers
			getTier() == return carTier_.getTier();
			
		pure public getNrOfPassengers : () ==> nat
			getNrOfPassengers() == return card passengers_;
			
		

end Autonomous



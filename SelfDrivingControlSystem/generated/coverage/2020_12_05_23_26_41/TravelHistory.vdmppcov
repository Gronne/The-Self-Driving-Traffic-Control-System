
class TravelHistory
	types
		public event_t = <pickUp> | <dropOff>;
		public event_r :: passenger : Passenger
							 				event 		: event_t;
		public history_t = seq of event_r;
		
	
	instance variables
		private travelHistory_ : history_t := [];
		
	inv InvMaxNTimesInSeq(travelHistory_, 2)
		
		
	functions
		protected InvMaxNTimesInSeq : seq of ? * nat -> bool
			InvMaxNTimesInSeq(sequence, maxTimes) == forall element in set elems sequence & timesInSeq(sequence, element) <= maxTimes;
			
		protected timesInSeq : seq of ? * ? -> nat
			timesInSeq(sequence, element) == 	if sequence = [] then 0 
																				else (if (hd sequence) = element then 1 else 0) + timesInSeq(tl sequence, element)
		measure len sequence;
	
	
		protected passengerInSeq : history_t * Passenger -> bool
			passengerInSeq(history, passenger) == card (elems history inter {mk_event_r(passenger, <pickUp>), mk_event_r(passenger, <dropOff>)}) > 0;
			
		protected passengerLastEvent : history_t * Passenger * event_t -> bool
			passengerLastEvent(history, passenger, event) == let eventSeq = [eventR | eventR in seq history & eventR.passenger = passenger] in 
																														if eventSeq = [] then false 
																														else eventSeq(len eventSeq).event = event;
			
	
	
	operations
		public TravelHistory : () ==> TravelHistory
			TravelHistory() == return self;
			
		
		public pickUp : Passenger ==> ()
			pickUp(passenger) == (
				dcl newEvent : event_r := mk_event_r(passenger, <pickUp>);
				travelHistory_ := travelHistory_ ^ [newEvent];
			)
		pre not passengerInSeq(travelHistory_, passenger)
		post passengerInSeq(travelHistory_, passenger);
			
			
		public dropOff : Passenger ==> ()
			dropOff(passenger) == (
				dcl newEvent : event_r := mk_event_r(passenger, <dropOff>);
				travelHistory_ := travelHistory_ ^ [newEvent];
			)
		pre passengerInSeq(travelHistory_, passenger) => passengerLastEvent(travelHistory_, passenger, <pickUp>);
		
		
		pure public nrEventsAfterPickUp : Passenger ==> nat
			nrEventsAfterPickUp(passenger) == return len travelHistory_ - (inverse { index |-> travelHistory_(index) | index in set inds travelHistory_ })(mk_event_r(passenger, <pickUp>))
		pre passengerInSeq(travelHistory_, passenger);
		
		pure public checkPassengerInSeq : Passenger ==> bool
			checkPassengerInSeq(passenger) == return passengerInSeq(travelHistory_, passenger);


end TravelHistory
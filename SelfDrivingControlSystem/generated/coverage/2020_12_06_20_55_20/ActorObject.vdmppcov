
class ActorObject

	instance variables
		protected id_: Identification;
		protected location_: Location;
		protected route_: Route;			
		
		
	functions
		protected timeToTravelRoad : Road * nat -> real
			timeToTravelRoad(road, time) == (road.getLength()/road.getSpeedLimit()) * 60 * 60;  -- can be changed to get speed as input parameter
																									
		
	
	operations
		public ActorObject : () ==> ActorObject
			ActorObject() == (
				id_ := new Identification();
				location_ := new Location();
			);
			
		public ActorObject : Identification`ID_t ==> ActorObject
			ActorObject(id) == (
				id_ := new Identification(id);
				location_ := new Location();
			);
			
		protected constructor : Identification`ID_t ==> ()
			constructor(id) == (
				id_ := new Identification(id);
				location_ := new Location();
			);
		
		pure public getID : () ==> Identification`ID_t
			getID() == return id_.getID()
			post RESULT = id_.getID();
			
		pure public getLocation : () ==> Location`loc_t
			getLocation() == return location_.getLocation();
			
		public setLocation : Location`loc_t ==> ()
			setLocation(location) == location_.changeLocation(location);
			
			
		public updateRoute: Route ==> ()	
				updateRoute(route) == route_ := route
			pre route.getNrOfElements() > 0
			post route_.getNrOfElements() > 0;
			
		pure public getRouteLength : () ==> nat
			getRouteLength() == return route_.getNrOfElements();
			
		public step : nat ==> ()
			step(time) == (
				route_ := travelRoute(route_, time);
			);
			
		protected travelRoute : Route * int ==> Route
			travelRoute(route, time) == (
				let timeToTravel = floor(timeToTravelRoad(route.getElement(1), time)) in
					if route.getNrOfElements() = 0 then return route
					else if timeToTravel <= time then return travelRoute(route.removeFront(), time - timeToTravel)
					else return route;
			);
			
		
			
			
			
		
	
end ActorObject








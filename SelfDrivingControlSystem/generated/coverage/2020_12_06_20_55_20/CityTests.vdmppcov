class CityTests is subclass of TestCase, City
	
	operations
		public CityTests : seq of char ==> CityTests
			CityTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
			
				TestDefaultConstruct();
				TestConstructWithCityMap();
				TestConstructWithSimplyCity();
				
				TestCityInvOnlyXInActorSetManual();
				TestCityInvOnlyXInActorSetPedestrian();
				
				TestCityInvNoMatch();
				TestCityInvNoMatchMatch();
				TestCityInvNoMatchEmpty();
				
				TestCitySet2Seq();
				
				TestCityLocInCityMapInter();
				TestCityLocInCityMapRoad();
			);
			
		
		protected TestDefaultConstruct : () ==> ()
			TestDefaultConstruct() == (
				dcl emptyCity : City := new City();
				assertTrue(isofclass(City, emptyCity));
			);
			
			
		protected TestConstructWithCityMap : () ==> ()
			TestConstructWithCityMap() == (
				dcl cityMap : CityMap := new CityMap();
				dcl emptyCity : City := new City(cityMap);
				assertTrue(isofclass(City, emptyCity));
			);
			
		
		protected TestConstructWithSimplyCity : () ==> ()
			TestConstructWithSimplyCity() == (
				dcl simpleCityMap : CityMap := CityMapFileFactory`loadCity("SimpleCity", "SimpleCityNodes");
				dcl emptyCity : City := new City(simpleCityMap);
				assertTrue(isofclass(City, emptyCity));
			);
			
			
		------------- Functions ---------------
		
		protected TestCityInvOnlyXInActorSetManual : () ==> ()
			TestCityInvOnlyXInActorSetManual() == (
				dcl carA : City`passiveActor_t := new Manual(300);
				dcl carB : City`passiveActor_t := new Manual(300);
				dcl carC : City`passiveActor_t := new Manual(300);
				dcl setOfCar : set of City`passiveActor_t := { carA, carB, carC };
				
				dcl padA : City`passiveActor_t := new Pedestrian(10, new Intersection());
				dcl padB : City`passiveActor_t := new Pedestrian(10, new Intersection());
				dcl padC : City`passiveActor_t := new Pedestrian(10, new Intersection());
				dcl setOfPad : set of City`passiveActor_t := { padA, padB, padC };
				
				dcl mixedSet : set of City`passiveActor_t := setOfCar union setOfPad;
				
				assertTrue(City`InvOnlyTypeInActorSet[Manual](setOfCar));
				assertTrue(not City`InvOnlyTypeInActorSet[Manual](setOfPad));
				assertTrue(not City`InvOnlyTypeInActorSet[Manual](mixedSet));
			);
			
			
		protected TestCityInvOnlyXInActorSetPedestrian : () ==> ()
			TestCityInvOnlyXInActorSetPedestrian() == (
				dcl carA : City`passiveActor_t := new Manual(300);
				dcl carB : City`passiveActor_t := new Manual(300);
				dcl carC : City`passiveActor_t := new Manual(300);
				dcl setOfCar : set of City`passiveActor_t := { carA, carB, carC };
				
				dcl padA : City`passiveActor_t := new Pedestrian(10, new Intersection());
				dcl padB : City`passiveActor_t := new Pedestrian(10, new Intersection());
				dcl padC : City`passiveActor_t := new Pedestrian(10, new Intersection());
				dcl setOfPad : set of City`passiveActor_t := { padA, padB, padC };
				
				dcl mixedSet : set of City`passiveActor_t := setOfCar union setOfPad;
				
				assertTrue(not City`InvOnlyTypeInActorSet[Pedestrian](setOfCar));
				assertTrue(City`InvOnlyTypeInActorSet[Pedestrian](setOfPad));
				assertTrue(not City`InvOnlyTypeInActorSet[Pedestrian](mixedSet));
			);
			
		----------------------
			
		protected TestCityInvNoMatch : () ==> ()
			TestCityInvNoMatch() == (
				dcl seqNat : seq of nat := [1, 2, 3, 4, 5];
				dcl seqString : seq of seq of char := ["hej", "med", "dig"];
				
				assertTrue(City`InvNoMatch(seqNat));
				assertTrue(City`InvNoMatch(seqString));
			);
			
			
		protected TestCityInvNoMatchMatch : () ==> ()
			TestCityInvNoMatchMatch() == (
				dcl seqNat : seq of nat := [1, 2, 3, 4, 5, 1];
				dcl seqString : seq of seq of char := ["hej", "med", "dig", "dig"];
				
				assertTrue(not City`InvNoMatch(seqNat));
				assertTrue(not City`InvNoMatch(seqString));
			);
			
		
		protected TestCityInvNoMatchEmpty : () ==> ()
			TestCityInvNoMatchEmpty() == (
				dcl seqNat : seq of nat := [];
				dcl seqString : seq of seq of char := [];
				
				assertTrue(City`InvNoMatch(seqNat));
				assertTrue(City`InvNoMatch(seqString));
			);
			
		--------------------------
		
		protected TestCitySet2Seq : () ==> ()
			TestCitySet2Seq() == (
				dcl setNat : set of nat := {1, 2, 3, 4, 5, 1};
				dcl setString : set of seq of char := {"hej", "med", "dig", "dig"};
				
				assertTrue(forall elemA in seq set2Seq(setNat) & exists elemB in set setNat & elemA = elemB);
				assertTrue(forall elemA in seq set2Seq(setString) & exists elemB in set setString & elemA = elemB);
			);
			
		-------------------------
			
		protected TestCityLocInCityMapInter : () ==> ()
			TestCityLocInCityMapInter() == (
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				
				dcl cityMap : CityMap := new CityMap();
				
				assertTrue(not City`locInCityMap(cityMap, interA));
				assertTrue(not City`locInCityMap(cityMap, interB));
				assertTrue(not City`locInCityMap(cityMap, interC));
				
				cityMap.addIntersection(interA);
				assertTrue(City`locInCityMap(cityMap, interA));
				assertTrue(not City`locInCityMap(cityMap, interB));
				assertTrue(not City`locInCityMap(cityMap, interC));
				
				cityMap.addIntersection(interB);
				assertTrue(City`locInCityMap(cityMap, interA));
				assertTrue(City`locInCityMap(cityMap, interB));
				assertTrue(not City`locInCityMap(cityMap, interC));
				
				cityMap.addIntersection(interC);
				assertTrue(City`locInCityMap(cityMap, interA));
				assertTrue(City`locInCityMap(cityMap, interB));
				assertTrue(City`locInCityMap(cityMap, interC));
			);
		
			
		protected TestCityLocInCityMapRoad : () ==> ()
			TestCityLocInCityMapRoad() == (
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				dcl interC : Intersection := new Intersection();
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				dcl roadC : Road := new Road();
				
				dcl cityMap : CityMap := new CityMap();
				
				cityMap.addIntersection(interA);
				cityMap.addIntersection(interB);
				cityMap.addIntersection(interC);
				
				assertTrue(not City`locInCityMap(cityMap, roadA));
				assertTrue(not City`locInCityMap(cityMap, roadB));
				assertTrue(not City`locInCityMap(cityMap, roadC));
				
				cityMap.addRoad(roadA, interA, interB);
				assertTrue(City`locInCityMap(cityMap, roadA));
				assertTrue(not City`locInCityMap(cityMap, roadB));
				assertTrue(not City`locInCityMap(cityMap, roadC));
				
				cityMap.addRoad(roadB, interB, interC);
				assertTrue(City`locInCityMap(cityMap, roadA));
				assertTrue(City`locInCityMap(cityMap, roadB));
				assertTrue(not City`locInCityMap(cityMap, roadC));
				
				cityMap.addRoad(roadC, interC, interA);
				assertTrue(City`locInCityMap(cityMap, roadA));
				assertTrue(City`locInCityMap(cityMap, roadB));
				assertTrue(City`locInCityMap(cityMap, roadC));
			);
			
		---------------------------------
		
		
		
		
		--------------- Behaviour ---------------
			
			
			
end CityTests







class CityMap
	types
		protected intersectionMap_t = map Identification`ID_t to seq of Identification`ID_t;   -- Possible for a road to connect to the same intersection multiple times, the sequence does not matter
		protected roadMap_t = map Identification`ID_t to (Identification`ID_t * Identification`ID_t); -- A Road must be connected to two intersections 
		protected idInterMap_t = map Identification`ID_t to Intersection;
		protected idRoadMap_t = map Identification`ID_t to Road;
		public construction_types = Intersection | Road;
	
	
	instance variables
		interMap_ : intersectionMap_t := { |-> };
		roadMap_ : roadMap_t := { |-> };
		idToInterMap_ : idInterMap_t := { |-> };
		idToRoadMap_ : idRoadMap_t := { |-> };
		
	inv InvSameKeysInMaps(roadMap_, idToRoadMap_) and 
			InvSameKeysInMaps(interMap_, idToInterMap_) and 
			InvAllInterMapRngIdsInIdRoadMap(interMap_, idToRoadMap_) and 
			InvAllRoadMapRngIdsInIdInterMap(roadMap_, idToInterMap_) and
			InvAllIdKeysMatchObjectID(idToInterMap_) and 
			InvAllIdKeysMatchObjectID(idToRoadMap_) and 
			InvMaxNInMappings(interMap_, 2);
		
		
	functions
		protected InvSameKeysInMaps : map ? to ? * map ? to ? -> bool
			InvSameKeysInMaps(mapA, mapB) == (forall keyA in set dom mapA & exists keyB in set dom mapB & keyA = keyB);
																					 
		protected InvAllInterMapRngIdsInIdRoadMap : intersectionMap_t * idRoadMap_t -> bool
			InvAllInterMapRngIdsInIdRoadMap(interMap, idToRoadMap) == forall idList in set rng interMap & forall id in seq idList & exists roadId in set dom idToRoadMap & roadId = id;
			
		protected InvAllRoadMapRngIdsInIdInterMap : roadMap_t * idInterMap_t -> bool
			InvAllRoadMapRngIdsInIdInterMap(roadMap, idToInterMap) == forall idTuple in set rng roadMap & forall id in seq [idTuple.#1, idTuple.#2] & exists interId in set dom idToInterMap & id = interId;
			
		protected InvAllIdKeysMatchObjectID : map Identification`ID_t to CityConstruction -> bool
			InvAllIdKeysMatchObjectID(idMap) == forall id in set dom idMap & idMap(id).getID() = id;
			
		protected InvMaxNInMappings : intersectionMap_t * nat -> bool
			InvMaxNInMappings(interMap, underValue) == forall key in set dom interMap & maxNIdenticalInSeq(interMap(key), underValue);
			
	
		protected InvIdInMap : ? * Identification`ID_t -> bool
			InvIdInMap(mapToCheck, id) == exists key in set dom mapToCheck & key = id;
			
			
		protected maxNIdenticalInSeq : seq of ? * nat -> bool
			maxNIdenticalInSeq(sequence, underValue) == forall element in set elems sequence & countElementInSeq(sequence, element) <= underValue;
			
		protected countElementInSeq : seq of ? * ? -> nat
			countElementInSeq(sequence, element) ==
				if len sequence = 0 then 0
				else (if element = hd sequence then 1 else 0) + countElementInSeq(tl sequence, element)
			measure len sequence;
	
	
		protected addToIdMap : map Identification`ID_t to construction_types * construction_types -> map Identification`ID_t to construction_types
			addToIdMap(oldMap, element) == (
				oldMap ++ {element.getID() |-> element}
			)
			post InvIdInMap(RESULT, element.getID());
			
			
		protected addNewInterToInterMap : intersectionMap_t * Intersection -> intersectionMap_t
			addNewInterToInterMap(oldMap, intersection) == (
				{intersection.getID() |-> []} ++ oldMap
			)
			post InvIdInMap(RESULT, intersection.getID());
			
			
		protected addNewRoadToInterMap : intersectionMap_t * Road * Intersection -> intersectionMap_t
			addNewRoadToInterMap(oldMap, road, intersection) == (
				oldMap ++ { intersection.getID() |-> oldMap(intersection.getID()) ^ [road.getID()] }
			)
			pre InvIdInMap(oldMap, intersection.getID())
			post exists element in seq RESULT(intersection.getID()) & element = road.getID();
			
			
		protected addToRoadMap : roadMap_t * Road * Intersection * Intersection -> roadMap_t
			addToRoadMap(oldMap, road, interA, interB) == (
				oldMap ++ {road.getID() |-> mk_(interA.getID(), interB.getID())}
			)
			post InvIdInMap(RESULT, road.getID());
			
		
		
	
	operations
		public CityMap : () ==> CityMap
			CityMap() == return self;
			
		public CityMap : CityMap ==> CityMap
			CityMap(oldCityMap) == (
				interMap_ := oldCityMap.interMap_;
				roadMap_ := oldCityMap.roadMap_;
				
				idToInterMap_ := oldCityMap.idToInterMap_;
				idToRoadMap_ := oldCityMap.idToRoadMap_;
			)			
		post interMap_ = oldCityMap.interMap_ and roadMap_ = oldCityMap.roadMap_;
		
		
		public addIntersection : Intersection ==> ()
			addIntersection(intersection) == (
				idToInterMap_ := addToIdMap(idToInterMap_, intersection);
				interMap_ := addNewInterToInterMap(interMap_, intersection);
			)
			post InvSameKeysInMaps(idToInterMap_, interMap_);
			
		public addRoad : Road * Intersection * Intersection ==> ()
			addRoad(road, interFrom, interTo) == (
				idToRoadMap_ := addToIdMap(idToRoadMap_, road);
				roadMap_ := addToRoadMap(roadMap_, road, interFrom, interTo);
				interMap_ := addNewRoadToInterMap(interMap_, road, interFrom);
			)
			pre InvIdInMap(idToInterMap_, interFrom.getID()) and InvIdInMap(idToInterMap_, interTo.getID())
			post InvSameKeysInMaps(idToRoadMap_, roadMap_);
		
		pure public getSetOfInter : () ==> set of Intersection
			getSetOfInter() == (
				return rng idToInterMap_;
			);
			
			
		pure public getSetOfRoad : () ==> set of Road
			getSetOfRoad() == (
				return rng idToRoadMap_;
			);
			
						
		pure public getSeqOfRoad : Intersection ==> seq of Road
			getSeqOfRoad(intersection) == (
				dcl listOfIDs : seq of Identification`ID_t := interMap_(intersection.getID());
				return [ idToRoadMap_(id) | id in seq listOfIDs ];
			);
			
		-- For a road to be active must the road and the both of its intersections be open
		public getSeqOfActiveRoad : Intersection ==> seq of Road
			getSeqOfActiveRoad(intersection) == (
				dcl listOfIDs : seq of Identification`ID_t := interMap_(intersection.getID());
				return [ idToRoadMap_(id) | id in seq listOfIDs & getRoad(id).isBlocked() = false and 
																													getInterTupleFromRoad(getRoad(id)).#1.isBlocked() = false and 
																													getInterTupleFromRoad(getRoad(id)).#2.isBlocked() = false ];
			)
			pre intersection.getID() in set dom idToInterMap_
			post forall road in seq RESULT & road.isBlocked() = false;
			
		-- For a road to be active must the road and the both of its intersections be open
		public getSeqOfActiveRoad : Identification`ID_t ==> seq of Road
			getSeqOfActiveRoad(id) == (
				dcl listOfIDs : seq of Identification`ID_t := interMap_(id);
				return [ idToRoadMap_(id) | id in seq listOfIDs & getRoad(id).isBlocked() = false and 
																													getInterTupleFromRoad(getRoad(id)).#1.isBlocked() = false and 
																													getInterTupleFromRoad(getRoad(id)).#2.isBlocked() = false ];
			)
			pre id in set dom idToInterMap_
			post forall road in seq RESULT & road.isBlocked() = false;
			
		pure public getInterTupleFromRoad : Road ==> (Intersection * Intersection)
			getInterTupleFromRoad(road) == (
				dcl interIdA : Identification`ID_t := roadMap_(road.getID()).#1;
				dcl interIdB : Identification`ID_t := roadMap_(road.getID()).#2;
				return mk_( idToInterMap_(interIdA) , idToInterMap_(interIdB) );
			)
		pre exists id in set dom roadMap_ & id = road.getID();
		
		
		public block : construction_types ==> ()
			block(construction) == (
				if is_(construction, Intersection) then 
					idToInterMap_(construction.getID()).close()
				elseif is_(construction, Road) then
					idToRoadMap_(construction.getID()).close()
				else
					error;
			)
			pre InvIdInMap(idToInterMap_, construction.getID()) or InvIdInMap(idToRoadMap_, construction.getID());
			
		
		public open : construction_types ==> ()
			open(construction) == (
				if is_(construction, Intersection) then 
					idToInterMap_(construction.getID()).open()
				elseif is_(construction, Road) then
					idToRoadMap_(construction.getID()).open()
				else
					error;
			)
			pre InvIdInMap(idToInterMap_, construction.getID()) or InvIdInMap(idToRoadMap_, construction.getID());
			
		
		public getRoad : Identification`ID_t ==> Road
			getRoad(id) == return idToRoadMap_(id)
		pre InvIdInMap(idToRoadMap_, id)
		post RESULT.getID() = id;
		
		public getRoad : Road ==> Road
			getRoad(road) == return idToRoadMap_(road.getID())
		pre InvIdInMap(idToRoadMap_, road.getID())
		post RESULT.getID() = road.getID();
		
		
		public getInter : Identification`ID_t ==> Intersection
			getInter(id) == return idToInterMap_(id)
		pre InvIdInMap(idToInterMap_, id)
		post RESULT.getID() = id;
		
		public getInter : Intersection ==> Intersection
			getInter(interE) == return idToInterMap_(interE.getID())
		pre InvIdInMap(idToInterMap_, interE.getID())
		post RESULT.getID() = interE.getID();
			

end CityMap



















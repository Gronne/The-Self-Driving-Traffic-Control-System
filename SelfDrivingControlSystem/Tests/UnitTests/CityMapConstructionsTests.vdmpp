class CityMapConstructionsTests is subclass of TestCase
	
	operations
		public CityMapConstructionsTests : seq of char ==> CityMapConstructionsTests
			CityMapConstructionsTests(name) == ( setName(name); );
			
		protected RunTest : () ==> ()
			RunTest() == (
				TestCityConstructionFactoryCreateRoad();
				TestCityConstructionFactoryCreateIntersectionNothing();
				TestCityConstructionFactoryCreateIntersectionID();
				TestCityConstructionFactoryCreateIntersectionType();
				TestCityConstructionFactoryCreateIntersectionIDType();
				TestCityConstructionFactoryCreateIntersectionBorder();
				TestCityConstructionFactoryCreateIntersectionCenter();
				TestCityConstructionFactoryCreateIntersectionDiff();
				TestCityConstructionFactoryCreateIntersectionBorderID();
				TestCityConstructionFactoryCreateIntersectionCenterID();
				
				TestCityConstructionConstructorEmpty();
				TestCityConstructionConstructorID();
				TestCityConstructionGetID();
				TestCityConstructionOpen();
				TestCityConstructionClose();
				TestCityConstructionGetBlocked();
				
				TestIntersectionConstructorEmpty();
				TestIntersectionConstructorID();
				TestIntersectionConstructorType();
				TestIntersectionConstructorTypeID();
				TestIntersectionGetID();
				TestIntersectionIsBlocked();
				TestIntersectionChangeBlocked();
				
				TestRoadConstructorEmpty();
				TestRoadConstructorLengthSpeed();
				TestRoadConstructorIDLengthSpeed();
				TestRoadGetLength();
				TestRoadGetSpeedLimit();
				TestRoadGetID();
				TestRoadIsBlocked();
				TestRoadChangeBlocked();
			);
			
			
		---------- CityConstructionFactory -----------
		
		protected TestCityConstructionFactoryCreateRoad : () ==> ()
			TestCityConstructionFactoryCreateRoad() == (
				dcl length : Length`length_t := 100;
				dcl speed : Speed`speed_t := 200;
				dcl road : Road := CityConstructionFactory`createRoad(length, speed);
				
				assertTrue(isofclass(Road, road));
				assertTrue(road.getLength() = length);
				assertTrue(road.getSpeedLimit() = speed);
			);
			
			
		protected TestCityConstructionFactoryCreateIntersectionNothing : () ==> ()
			TestCityConstructionFactoryCreateIntersectionNothing() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersection();
				dcl interB : Intersection := CityConstructionFactory`createIntersection();
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <center>);
				assertTrue(interB.type = <center>);
				assertTrue(interA.type = interB.type);
			);
			
			
		protected TestCityConstructionFactoryCreateIntersectionID : () ==> ()
			TestCityConstructionFactoryCreateIntersectionID() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersection(123);
				dcl interB : Intersection := CityConstructionFactory`createIntersection("123");
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() = 123);
				assertTrue(interB.getID() = "123");
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <center>);
				assertTrue(interB.type = <center>);
				assertTrue(interA.type = interB.type);
			);
		
		
		protected TestCityConstructionFactoryCreateIntersectionType : () ==> ()
			TestCityConstructionFactoryCreateIntersectionType() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersection(<border>);
				dcl interB : Intersection := CityConstructionFactory`createIntersection(<center>);
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.type = <border>);
				assertTrue(interB.type = <center>);
				assertTrue(interA.type <> interB.type);
			);
			
		
		protected TestCityConstructionFactoryCreateIntersectionIDType : () ==> ()
			TestCityConstructionFactoryCreateIntersectionIDType() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersection(123, <border>);
				dcl interB : Intersection := CityConstructionFactory`createIntersection("123", <border>);
				dcl interC : Intersection := CityConstructionFactory`createIntersection(456, <center>);
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() = 123);
				assertTrue(interB.getID() = "123");
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <border>);
				assertTrue(interB.type = <border>);
				assertTrue(interA.type = interB.type);
				assertTrue(interA.type <> interC.type);
			);
			
		
		protected TestCityConstructionFactoryCreateIntersectionBorder : () ==> ()
			TestCityConstructionFactoryCreateIntersectionBorder() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersectionBorder();
				dcl interB : Intersection := CityConstructionFactory`createIntersectionBorder();
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <border>);
				assertTrue(interB.type = <border>);
				assertTrue(interA.type = interB.type);
			);
			
		
		protected TestCityConstructionFactoryCreateIntersectionCenter : () ==> ()
			TestCityConstructionFactoryCreateIntersectionCenter() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersectionCenter();
				dcl interB : Intersection := CityConstructionFactory`createIntersectionCenter();
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <center>);
				assertTrue(interB.type = <center>);
				assertTrue(interA.type = interB.type);
			);
			
		
		protected TestCityConstructionFactoryCreateIntersectionDiff : () ==> ()
			TestCityConstructionFactoryCreateIntersectionDiff() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersectionBorder();
				dcl interB : Intersection := CityConstructionFactory`createIntersectionCenter();
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <border>);
				assertTrue(interB.type = <center>);
				assertTrue(interA.type <> interB.type);
			);
			
		
		protected TestCityConstructionFactoryCreateIntersectionBorderID : () ==> ()
			TestCityConstructionFactoryCreateIntersectionBorderID() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersectionBorder();
				dcl interB : Intersection := CityConstructionFactory`createIntersectionBorder();
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <border>);
				assertTrue(interB.type = <border>);
				assertTrue(interA.type = interB.type);
			);
			
		
		protected TestCityConstructionFactoryCreateIntersectionCenterID : () ==> ()
			TestCityConstructionFactoryCreateIntersectionCenterID() == (
				dcl interA : Intersection := CityConstructionFactory`createIntersectionCenter(123);
				dcl interB : Intersection := CityConstructionFactory`createIntersectionCenter("123");
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.type = <center>);
				assertTrue(interB.type = <center>);
				assertTrue(interA.type = interB.type);
				assertTrue(interA.getID() = 123);
				assertTrue(interB.getID() = "123");
			);
		
		
		
		-------------- CityConstruction --------------	
		
		protected TestCityConstructionConstructorEmpty : () ==> ()
			TestCityConstructionConstructorEmpty() == (
				dcl constructionA : CityConstruction := new CityConstruction();
				dcl constructionB : CityConstruction := new CityConstruction();
				
				assertTrue(isofclass(CityConstruction, constructionA));
				assertTrue(constructionA.getID() <> constructionB.getID());
				assertTrue(constructionA.isBlocked() = false);
			);
			
		
		protected TestCityConstructionConstructorID : () ==> ()
			TestCityConstructionConstructorID() == (
				dcl constructionA : CityConstruction := new CityConstruction(123);
				dcl constructionB : CityConstruction := new CityConstruction("123");
				
				assertTrue(isofclass(CityConstruction, constructionA));
				assertTrue(constructionA.getID() <> constructionB.getID());
				assertTrue(constructionA.getID() = 123);
				assertTrue(constructionB.getID() = "123");
				assertTrue(constructionA.isBlocked() = false);
			);
			
		
		protected TestCityConstructionGetID : () ==> ()
			TestCityConstructionGetID() == (
				dcl constructionA : CityConstruction := new CityConstruction(123);
				dcl constructionB : CityConstruction := new CityConstruction("123");
				
				assertTrue(constructionA.getID() = 123);
				assertTrue(constructionB.getID() = "123");
			);
			
		
		protected TestCityConstructionClose : () ==> ()
			TestCityConstructionClose() == (
				dcl constructionA : CityConstruction := new CityConstruction();
				constructionA.close();
				assertTrue(constructionA.isBlocked() = true);
			);
			
			
		protected TestCityConstructionOpen : () ==> ()
			TestCityConstructionOpen() == (
				dcl constructionA : CityConstruction := new CityConstruction();
				constructionA.close();
				constructionA.open();
				assertTrue(constructionA.isBlocked() = false);
			);
			
			
		protected TestCityConstructionGetBlocked : () ==> ()
			TestCityConstructionGetBlocked() == (
				dcl constructionA : CityConstruction := new CityConstruction();
				assertTrue(constructionA.isBlocked() = false);
				constructionA.close();
				assertTrue(constructionA.isBlocked() = true);
				constructionA.open();
				assertTrue(constructionA.isBlocked() = false);
			);
			
			
		
		---------------- Intersection ----------------
		
		protected TestIntersectionConstructorEmpty : () ==> ()
			TestIntersectionConstructorEmpty() == (
				dcl interA : Intersection := new Intersection();
				dcl interB : Intersection := new Intersection();
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(isofbaseclass(CityConstruction, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.isBlocked() = false);
				assertTrue(interA.type = <center>);
				assertTrue(interA.type = interA.type);
			);
			
		
		protected TestIntersectionConstructorID : () ==> ()
			TestIntersectionConstructorID() == (
				dcl interA : Intersection := new Intersection(123);
				dcl interB : Intersection := new Intersection("123");
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(isofbaseclass(CityConstruction, interA));
				assertTrue(interA.getID() = 123);
				assertTrue(interB.getID() = "123");
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.isBlocked() = false);
				assertTrue(interA.type = <center>);
				assertTrue(interA.type = interA.type);
			);
			
		
		protected TestIntersectionConstructorType : () ==> ()
			TestIntersectionConstructorType() == (
				dcl interA : Intersection := new Intersection(<center>);
				dcl interB : Intersection := new Intersection(<border>);
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(isofbaseclass(CityConstruction, interA));
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.isBlocked() = false);
				assertTrue(interA.type = <center>);
				assertTrue(interB.type = <border>);
				assertTrue(interA.type <> interB.type);
			);
			
		
		protected TestIntersectionConstructorTypeID : () ==> ()
			TestIntersectionConstructorTypeID() == (
				dcl interA : Intersection := new Intersection(<center>, 123);
				dcl interB : Intersection := new Intersection(<border>, "123");
				
				assertTrue(isofclass(Intersection, interA));
				assertTrue(isofbaseclass(CityConstruction, interA));
				assertTrue(interA.getID() = 123);
				assertTrue(interB.getID() = "123");
				assertTrue(interA.getID() <> interB.getID());
				assertTrue(interA.isBlocked() = false);
				assertTrue(interA.type = <center>);
				assertTrue(interB.type = <border>);
				assertTrue(interA.type <> interB.type);
			);
			
			
		protected TestIntersectionGetID : () ==> ()
			TestIntersectionGetID() == (
				dcl interA : Intersection := new Intersection(1);
				dcl interB : Intersection := new Intersection(2);
				
				assertTrue(interA.getID() = 1);
				assertTrue(interB.getID() = 2);
				assertTrue(interA.getID() <> interB.getID());
			);
			
		
		protected TestIntersectionIsBlocked : () ==> ()
			TestIntersectionIsBlocked() == (
				dcl interA : Intersection := new Intersection();
				
				assertTrue(interA.isBlocked() = false);
				interA.close();
				assertTrue(interA.isBlocked() = true);
			);
			
		
		protected TestIntersectionChangeBlocked : () ==> ()
			TestIntersectionChangeBlocked() == (
				dcl interA : Intersection := new Intersection();
				
				assertTrue(interA.isBlocked() = false);
				interA.close();
				assertTrue(interA.isBlocked() = true);
				interA.open();
				assertTrue(interA.isBlocked() = false);
			);
		
		
		
		-------------------- Road --------------------	
		
		protected TestRoadConstructorEmpty : () ==> ()
			TestRoadConstructorEmpty() == (
				dcl road : Road := new Road();
				
				assertTrue(isofclass(Road, road));
				assertTrue(road.getLength() = 300);
				assertTrue(road.getSpeedLimit() = 10);
			);
			
			
		protected TestRoadConstructorLengthSpeed : () ==> ()
			TestRoadConstructorLengthSpeed() == (
				dcl length : Length`length_t := 10000;
				dcl speed : Speed`speed_t := 50;
				dcl road : Road := new Road(length, speed);
				
				assertTrue(isofclass(Road, road));
				assertTrue(road.getLength() = length);
				assertTrue(road.getSpeedLimit() = speed);
			);
			
		
		protected TestRoadConstructorIDLengthSpeed : () ==> ()
			TestRoadConstructorIDLengthSpeed() == (
				dcl id : Identification`ID_t := 123;
				dcl length : Length`length_t := 10000;
				dcl speed : Speed`speed_t := 50;
				dcl road : Road := new Road(id, length, speed);
				
				assertTrue(isofclass(Road, road));
				assertTrue(road.getID() = id);
				assertTrue(road.getLength() = length);
				assertTrue(road.getSpeedLimit() = speed);
			);
			
		
		protected TestRoadGetLength : () ==> ()
			TestRoadGetLength() == (
				dcl lengthA : Length`length_t := 10000;
				dcl lengthB : Length`length_t := 2345;
				dcl roadA : Road := new Road(lengthA, 50);
				dcl roadB : Road := new Road(lengthB, 50);
				
				assertTrue(roadA.getLength() = lengthA);
				assertTrue(roadB.getLength() = lengthB);
				assertFalse(roadA.getLength() = lengthB);
				assertFalse(roadB.getLength() = lengthA);
			);
			
		
		protected TestRoadGetSpeedLimit : () ==> ()
			TestRoadGetSpeedLimit() == (
				dcl speedA : Speed`speed_t := 50;
				dcl speedB : Speed`speed_t := 80;
				dcl roadA : Road := new Road(1000, speedA);
				dcl roadB : Road := new Road(1000, speedB);
				
				assertTrue(roadA.getSpeedLimit() = speedA);
				assertTrue(roadB.getSpeedLimit() = speedB);
				assertFalse(roadA.getSpeedLimit() = speedB);
				assertFalse(roadB.getSpeedLimit() = speedA);
			);			
			
			
		protected TestRoadGetID : () ==> ()
			TestRoadGetID() == (
				dcl roadA : Road := new Road();
				dcl roadB : Road := new Road();
				
				assertTrue(roadA.getID() <> roadB.getID());
			);
			
		
		protected TestRoadIsBlocked : () ==> ()
			TestRoadIsBlocked() == (
				dcl roadA : Road := new Road();
				
				assertTrue(roadA.isBlocked() = false);
				roadA.close();
				assertTrue(roadA.isBlocked() = true);
			);
			
		
		protected TestRoadChangeBlocked : () ==> ()
			TestRoadChangeBlocked() == (
				dcl roadA : Road := new Road();
				
				assertTrue(roadA.isBlocked() = false);
				roadA.close();
				assertTrue(roadA.isBlocked() = true);
				roadA.open();
				assertTrue(roadA.isBlocked() = false);
			);
		
		
			
			
end CityMapConstructionsTests



